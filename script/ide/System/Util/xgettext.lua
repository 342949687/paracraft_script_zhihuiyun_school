--[[
Title: xgettext
Author(s):  lixizhi
Date: 2023-5-10
Desc: /xgettext and /poedit uses this class to extract translation strings. 
use the lib:
------------------------------------------------------------
local xgettext = NPL.load("script/ide/System/Util/xgettext.lua");
xgettext:extract_NonEnglishString({"script/apps/Aries/Creator/Game/"})
xgettext:extract_NonEnglishString({"foldername/", "filename.lua", "filename.html"})
xgettext:open_poedit_file()
------------------------------------------------------------
]]

local xgettext = commonlib.inherit(nil, NPL.export());

-- default temp string files
xgettext.default_output_src_file = "temp/poedit/test_paracraft_temp_poedit_strings.lua"
xgettext.po_file = "config/Aries/creator/language/paracraft_enUS.po";

-- default files to translate, we will extract all Chinese strings from these files
xgettext.default_filelist = {
	"config/Aries/creator/LoopWords.mobile.xml",
	"config/Aries/creator/LoopWords.mc.xml",
	"config/Aries/creator/PlayerSkins.xml",
	"config/Aries/creator/PlayerAssetFile.xml",
	"config/Aries/creator/block_types.xml",
	"config/Aries/creator/WebTutorials.xml",
	"config/Aries/creator/shortcutkey.xml",
	"config/Aries/creator/modelAnim.xml",
	"config/Aries/creator/blocktemplates/buildingtask/MovieMaking/info.xml",
	"config/Aries/creator/blocktemplates/buildingtask/newusertutorial/info.xml",
	-- "config/Aries/creator/blocktemplates/buildingtask/logic/info.xml",
	"config/Aries/creator/blocktemplates/buildingtask/newyearbuilding/info.xml",
	"config/Aries/creator/blocktemplates/buildingtask/circuit/info.xml",
	"config/Aries/creator/blocktemplates/buildingtask/smallstructure/info.xml",

	-- HTML files in these folders, script files are configured in poedit file. 
	"script/apps/Aries/Creator/Game/", 
	"Mod/",
}

xgettext.filterFunc = function(item)
	local ext = item.filename:match("%.(%w+)$")
	return (ext == "lua" or ext == "html")
end

function xgettext:ctor()
end

function xgettext:CreatePoeditFile(bCreateIfNotExist)
	local filename = self.po_file;
	if(bCreateIfNotExist) then
		if(ParaIO.DoesFileExist(filename)) then
			return true;
		end
	end
	ParaIO.CreateDirectory(filename);
	local out = ParaIO.open(filename, "w");
	out:WriteString([[msgid ""
msgstr ""
"Project-Id-Version: paracraft\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Poedit-SourceCharset: UTF-8\n"
"X-Poedit-KeywordsList: L\n"
"X-Poedit-Basepath: ../\n"
"X-Poedit-SearchPath-0: .\n"
]]);
	out:close();
	return true;
end

-- @param filter: a function({filename, filesize, writedate}) return true or false end.  
function xgettext:GetFilesInFolders(filelist, filterFunc)
	
	local filenames = {};
	for _, filename in pairs(filelist) do
		if(filename:match("/$")) then
			local folder = filename:gsub("/$", "");
			local files = commonlib.Files.Find({}, folder, 10, 2000, filterFunc or self.filterFunc or "*.*");
			for _, file in ipairs(files) do
				filenames[#filenames+1] = filename..file.filename;
			end
		else
			filenames[#filenames+1] = filename;
		end
	end
	return filenames;
end

-- @param filter: a function({filename, filesize, writedate}) return true or false end.  it can also be "*.html"
function xgettext:SetFolderFileFilters(filterFunc)
	self.filterFunc = filterFunc;
end

-- @param filelist: if nil, it will be self.default_filelist. array of filenames or folders. filename ending with / will be regarded as folder. 
-- @param output_src_filename: if nil, it will be self.default_output_src_file. The default source file containing all strings.
-- return all text strings
function xgettext:extract_NonEnglishString(filelist, output_src_filename)
	local nCount = 0;
	output_src_filename = output_src_filename or self.default_output_src_file;
	ParaIO.CreateDirectory(output_src_filename);
	local out = ParaIO.open(output_src_filename, "w");
	out:WriteString("-- file is automatically generated by /poedit or /xgettext commmand, do not edit manually. \r\n\r\n");

	local ignoreWarningFiles = {}
	for _, filename in ipairs(filelist or self.default_filelist) do
		ignoreWarningFiles[filename] = true
	end

	filelist = self:GetFilesInFolders(filelist or self.default_filelist);
	local existingText = {};
	local warnings = {};
	local warningCount = 0;
	for _, filename in ipairs(filelist) do
		local hasText;
		local file = ParaIO.open(filename, "r");
		local line = file:readline();
		while(line) do
			-- extract all non-English text in quatations
			-- TODO: inner text in XML is not supported yet. 
			for hasL, text in line:gmatch("(L?)[\"']([^\"']*[%z\1-\127\194-\244][\128-\191]+[^\"']*)[\"']") do
				if(hasL == "L" or ignoreWarningFiles[filename]) then
					if(existingText[text] ~= true) then
						existingText[text] = true;
						if(not hasText) then
							hasText = true
							out:WriteString(format("-- %s\r\n", filename));
						end
						out:WriteString(format("L\"%s\"\r\n", text));
						nCount = nCount + 1;
					end
				else
					if(not existingText[text]) then
						existingText[text] = 1;
						local fileItem = warnings[filename];
						if(not fileItem) then
							fileItem = {}
							warnings[filename] = fileItem;
						end
						fileItem[#fileItem + 1] = text;
						warningCount = warningCount + 1;
					end
				end
			end
			line = file:readline();
		end
		file:close();
	end
	if(warningCount > 0) then
		out:WriteString(format("-- warnings %d unicode strings are not localized. \r\n", warningCount));
		for containingFilename, item in pairs(warnings) do
			out:WriteString(format("-- %s\r\n", containingFilename));
			for _, filename in ipairs(item) do
				out:WriteString(format("NoL\"%s\"\r\n", filename));
			end
		end
	end

	out:close();
	LOG.std(nil, "info", "xgettext", format("%d strings to %s", nCount, output_src_filename));
	GameLogic.AddBBS(nil, format("%d strings extracted, %d warnings, see log file", nCount, warningCount));
	return existingText;
end

function xgettext:open_poedit_file()
	ParaGlobal.ShellExecute("open", ParaIO.GetCurDirectory(0)..self.po_file, "", "", 1);
end
