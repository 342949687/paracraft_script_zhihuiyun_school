<?xml version="1.0" encoding="utf-8" ?>

<doc>
	<tables>
		<table name="mathlib" src="script/ide/mathlib.lua">
			<function line="26" name="QuatToEuler">
				<summary>function mathlib.QuatToEuler(q1) &#13;&#10;Conversion Quaternion to Euler&#13;&#10; &#32; @param q1: {x,y,z,w}&#13;&#10; &#32; @returns: heading, attitude, bank&#13;&#10; &#32; @note: code converted from http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm
				</summary>
				<parameter name="q1">{x,y,z,w}
				</parameter>
				<returns>return heading, attitude, bank
				</returns>
			</function>
			<function line="53" name="EulerToQuat">
				<summary>function mathlib.EulerToQuat(heading, attitude, bank) &#13;&#10;Conversion Euler to Quaternion&#13;&#10; &#32; @param heading(yaw), attitude(roll), bank(pitch)&#13;&#10; &#32; @returns: x,y,z,w
				</summary>
				<parameter name="heading">(yaw), attitude(roll), bank(pitch)
				</parameter>
				<parameter name="attitude"/>
				<parameter name="bank"/>
				<returns>return x,y,z,w
				</returns>
			</function>
			<function line="73" name="QuatFromAxisAngle">
				<summary>function mathlib.QuatFromAxisAngle(x,y,z, angle) &#13;&#10;assumes axis is already normalised&#13;&#10; &#32; @param x,y,z: is a normalized axis vector&#13;&#10; &#32; @param angle: is the angle to rotate
				</summary>
				<parameter name="x">,y,z: is a normalized axis vector
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="angle">is the angle to rotate
				</parameter>
			</function>
			<function line="88" name="QuaternionMultiply">
				<summary>function mathlib.QuaternionMultiply(q1,q2)&#13;&#10;Since a unit quaternion represents an orientation in 3D space, the multiplication of two unit quaternions will result in &#13;&#10;another unit quaternion that represents the combined rotation. Amazing, but it's true.&#13;&#10;see: http://www.cprogramming.com/tutorial/3d/quaternions.html&#13;&#10; &#32; @param q1,q2: q1 and q2 are two quaternion{x,y,z,w}
				</summary>
				<parameter name="q1">,q2: q1 and q2 are two quaternion{x,y,z,w}
				</parameter>
				<parameter name="q2"/>
			</function>
			<function line="98" name="WrapAngleTo180">
				<summary>function mathlib.WrapAngleTo180(angle)&#13;&#10;the angle is reduced to an angle between -180 and +180 by mod, and a 360 check
				</summary>
				<parameter name="angle"/>
			</function>
			<function line="111" name="ToStandardAngle">
				<summary>function mathlib.ToStandardAngle(fAngle)&#13;&#10;make sure that the angle is in the range (-Pi,Pi]
				</summary>
				<parameter name="fAngle"/>
			</function>
			<function line="142" name="SmoothMoveAngle">
				<summary>function mathlib.SmoothMoveAngle(src, dest, fMaxStep)&#13;&#10;change src from src to dest, by a maximum of fMaxStep. If dest has been reached, return true; otherwise return false.&#13;&#10; &#32; @return result_value, bEqual: 
				</summary>
				<parameter name="src"/>
				<parameter name="dest"/>
				<parameter name="fMaxStep"/>
				<returns>return , bEqual: 
				</returns>
			</function>
			<function line="156" name="lerp">
				<summary>function mathlib.lerp(a, b, t)&#13;&#10;such that t=0, return a. t=1, return b
				</summary>
				<parameter name="a"/>
				<parameter name="b"/>
				<parameter name="t"/>
			</function>
			<function line="161" name="GetHash">
				<summary>function mathlib.GetHash(value)&#13;&#10;get string hash, return int (maybe negative)
				</summary>
				<parameter name="value"/>
			</function>
			<function line="175" name="clamp">
				<summary>function mathlib.clamp(value, from, to)&#13;&#10;Returns the value of the first parameter, clamped to be within the lower and upper limits given by the second and third parameters
				</summary>
				<parameter name="value"/>
				<parameter name="from"/>
				<parameter name="to"/>
			</function>
			<function line="186" name="NextPowerOf2">
				<summary>function mathlib.NextPowerOf2(x)&#13;&#10;&#13;&#10; &#32; @param x: must be int, make sure to call math.floor(x) before this.
				</summary>
				<parameter name="x">must be int, make sure to call math.floor(x) before this.
				</parameter>
			</function>
			<function line="199" name="validateNumber">
				<summary>function mathlib.validateNumber(x)&#13;&#10;&#13;&#10; &#32; @return x if x is not NAN or INF. (not a number such as 1/0) 
				</summary>
				<parameter name="x"/>
				<returns>return if x is not NAN or INF. (not a number such as 1/0) 
				</returns>
			</function>
			<function line="206" name="SnapToGrid">
				<summary>function mathlib.SnapToGrid(value, gridSize)&#13;&#10;snapping value to multiples of gridSize&#13;&#10; &#32; @param gridSize: default to 1&#13;&#10; &#32; @return snapped value
				</summary>
				<parameter name="value"/>
				<parameter name="gridSize">default to 1
				</parameter>
				<returns>return value
				</returns>
			</function>
			<function line="212" name="GetAngleFromOffset">
				<summary>function mathlib.GetAngleFromOffset(dx, dy)&#13;&#10;&#13;&#10; &#32; @return [-pi, pi]
				</summary>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<returns>return [-pi, pi]
				</returns>
			</function>
			<function line="227" name="DoubleToFloat">
				<summary>function mathlib.DoubleToFloat(x)&#13;&#10;tricky: tricky conversion using an unused float32 field in attribute system. 
				</summary>
				<parameter name="x"/>
			</function>
			<function line="232" name="FloatToInt">
				<summary>function mathlib.FloatToInt(value) &#13;&#10;getting rid of decimal part, including negative values. This differs from math.floor()
				</summary>
				<parameter name="value"/>
			</function>
		</table>
		<table name="commonlib" src="script/ide/commonlib.lua">
			<function line="36" name="removeArrayItem">
				<summary>function commonlib.removeArrayItem(t, nIndex)&#13;&#10;remove an item from a table. The table size will be minored by 1.&#13;&#10; &#32; @param t: table array.&#13;&#10; &#32; @param nIndex: 1 based index, at which to remove the item
				</summary>
				<parameter name="t">table array.
				</parameter>
				<parameter name="nIndex">1 based index, at which to remove the item
				</parameter>
			</function>
			<function line="47" name="insertArrayItem">
				<summary>function commonlib.insertArrayItem(t, nIndex, item)&#13;&#10;insert an array item to a table array. The table size will be increased by 1.&#13;&#10; &#32; @param t: table array.&#13;&#10; &#32; @param nIndex: 1 based index, at which to insert the item. if nil, it will inserted to the end&#13;&#10; &#32; @return return 1 based index at which the item is inserted
				</summary>
				<parameter name="t">table array.
				</parameter>
				<parameter name="nIndex">1 based index, at which to insert the item. if nil, it will inserted to the end
				</parameter>
				<parameter name="item"/>
				<returns>return 1 based index at which the item is inserted
				</returns>
			</function>
			<function line="242" name="GetUIObject">
				<summary>function commonlib.GetUIObject(name, parent)&#13;&#10;get an UI object by specifying a serie of names separated by #, such as childname#childname#childname, &#13;&#10;e.g. commonlib.GetUIObject("wndParent#button1");&#13;&#10; &#32; @param name: e.g. "wndParent#button1", it can also be number id. if it is number, parent is ignored.&#13;&#10; &#32; @param parent: nil or a parent UI object inside which the name is searched. If nil, first childname is searched globally.&#13;&#10; &#32; @return: return the ParaUIObject found. if not found, the returned object IsValid() returns false. 
				</summary>
				<parameter name="name">e.g. "wndParent#button1", it can also be number id. if it is number, parent is ignored.
				</parameter>
				<parameter name="parent">nil or a parent UI object inside which the name is searched. If nil, first childname is searched globally.
				</parameter>
				<returns>return return the ParaUIObject found. if not found, the returned object IsValid() returns false. 
				</returns>
			</function>
			<function line="266" name="getfield">
				<summary>function commonlib.getfield(f, rootEnv)&#13;&#10;We rely on gfind, from the string library, to iterate over all words in f (where "word" is a sequence of one or more alphanumeric characters and underscores).&#13;&#10; &#32; @param f: f is a string like "a.b.c.d"&#13;&#10; &#32; @param rootEnv: it can be a table from which to search for f, if nil, the global table _G is used.&#13;&#10; &#32; @return: return the field in LUA, it may be nil, a value, or a table, etc. 
				</summary>
				<parameter name="f">f is a string like "a.b.c.d"
				</parameter>
				<parameter name="rootEnv">it can be a table from which to search for f, if nil, the global table _G is used.
				</parameter>
				<returns>return return the field in LUA, it may be nil, a value, or a table, etc. 
				</returns>
			</function>
			<function line="287" name="setfield">
				<summary>function commonlib.setfield(f, v, rootEnv)&#13;&#10;set a variable v to f, where f is a string&#13;&#10;the call setfield("t.x.y", 10) creates a global table t, another table t.x, and assigns 10 to t.x.y&#13;&#10; &#32; @param f: f is a string like "a.b.c.d"&#13;&#10; &#32; @param rootEnv: it can be a table from which to search for f, if nil, the global table _G is used. 
				</summary>
				<parameter name="f">f is a string like "a.b.c.d"
				</parameter>
				<parameter name="v"/>
				<parameter name="rootEnv">it can be a table from which to search for f, if nil, the global table _G is used. 
				</parameter>
			</function>
			<function line="303" name="gettable">
				<summary>function commonlib.gettable(f, rootEnv)&#13;&#10;get a table f, where f is a string&#13;&#10; &#32; @param f: f is a string like "a.b.c.d"&#13;&#10; &#32; @param rootEnv: it can be a table from which to search for f, if nil, the global table _G is used. 
				</summary>
				<parameter name="f">f is a string like "a.b.c.d"
				</parameter>
				<parameter name="rootEnv">it can be a table from which to search for f, if nil, the global table _G is used. 
				</parameter>
			</function>
			<function line="314" name="createtable">
				<summary>function commonlib.createtable(f, init_params, rootEnv)&#13;&#10;create/get a table and init it with init_params
				</summary>
				<parameter name="f"/>
				<parameter name="init_params"/>
				<parameter name="rootEnv"/>
			</function>
			<function line="326" name="ResetModelAsset">
				<summary>function commonlib.ResetModelAsset(_obj, assetfilename)&#13;&#10;reset the model asset&#13;&#10; &#32; @param obj: model object&#13;&#10; &#32; @assetfilename: file name of the asset file&#13;&#10; &#32; @return the new obj
				</summary>
				<parameter name="_obj"/>
				<parameter name="assetfilename"/>
				<returns>return new obj
				</returns>
			</function>
			<function line="357" name="MetaClone">
				<summary>function commonlib.MetaClone(obj)&#13;&#10;clone a obj using just meta table. It does not actually copy parameters. &#13;&#10;Note: one can not serialize a meta cloned object, because it is an empty table with the same meta table as input obj. 
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="369" name="deepcopy">
				<summary>function commonlib.deepcopy(object)&#13;&#10;code from: http://lua-users.org/wiki/CopyTable&#13;&#10;This function returns a deep copy of a given table. The function below also copies the metatable to the new table if there is one, &#13;&#10;so the behaviour of the copied table is the same as the original. But the 2 tables share the same metatable, &#13;&#10;you can avoid this by changing this 'getmetatable(object)' to '_copy( getmetatable(object) )'.
				</summary>
				<parameter name="object"/>
			</function>
			<function line="391" name="copy">
				<summary>function commonlib.copy(object)&#13;&#10;same as commonlib.clone except that it does not copy meta table. 
				</summary>
				<parameter name="object"/>
			</function>
			<function line="411" name="partialcopy">
				<summary>function commonlib.partialcopy(dest, src)&#13;&#10;this function simply does, dest = src, but it copies value from src to dest. &#13;&#10;It is mostly used with tables.It just copies what is in src to dest, but dest retains its other fields that does not exist in src.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
			</function>
			<function line="433" name="mincopy">
				<summary>function commonlib.mincopy(dest, src)&#13;&#10;this function simply does, dest = src, but it copies value from src to dest. &#13;&#10;It is mostly used with tables.It only copies src field to dest field, if src field name does not exist in dest. In other words, dest will preserve all its named fields plus additional fields in dest
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
			</function>
			<function line="454" name="partialcompare">
				<summary>function commonlib.partialcompare(dest, src, tolerance)&#13;&#10;this function simply does, dest = src, but it copies value from src to dest. &#13;&#10;It is mostly used with tables.It only copies src field to dest field, if src field name does not exist in dest. In other words, dest will preserve all its named fields plus additional fields in dest&#13;&#10;compares all fields in src with destination, value by value, if they are equal, true is returned. otherwise, return nil or false.&#13;&#10;Note that if dest has more fields than src, yet all src fields equals to dest, then it will still return true.&#13;&#10;Note: it also compare indexed array items&#13;&#10; &#32; @param tolerance: if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
				<parameter name="tolerance">if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
				</parameter>
			</function>
			<function line="476" name="partialfields">
				<summary>function commonlib.partialfields(dest, src, fields)&#13;&#10;compare all fields in dest with src and return true if equal.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
				<parameter name="fields"/>
			</function>
			<function line="484" name="compare">
				<summary>function commonlib.compare(dest, src, tolerance)&#13;&#10;strict compare all fields reccursively in dest and src, value by value&#13;&#10;Note: it also compare indexed array items&#13;&#10; &#32; @param tolerance: if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.&#13;&#10; &#32; @return true if equal.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
				<parameter name="tolerance">if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
				</parameter>
				<returns>return if equal.
				</returns>
			</function>
			<function line="491" name="resize">
				<summary>function commonlib.resize(t, size, v)&#13;&#10;resize a table to a new size. It ensures that all elements are nil. &#13;&#10;this function uses table_getn() instead of #t, use table.resize for #t
				</summary>
				<parameter name="t"/>
				<parameter name="size"/>
				<parameter name="v"/>
			</function>
			<function line="526" name="removeArrayItems">
				<summary>function commonlib.removeArrayItems(t, callback_func)&#13;&#10;remove all items that matches a certain criteria from an array table&#13;&#10;e.g. &#13;&#10;commonlib.removeArrayItems({1,2,3,4,5,6}, function(i, item) return (i%2==0); end); --&gt; {1,3,5}&#13;&#10; &#32; @param t: table to be removed&#13;&#10; &#32; @param callback_func: the callback function(index, item) end. if the function returns true, then the table item at the given index will be removed from the table.
				</summary>
				<parameter name="t">table to be removed
				</parameter>
				<parameter name="callback_func">the callback function(index, item) end. if the function returns true, then the table item at the given index will be removed from the table.
				</parameter>
			</function>
			<function line="544" name="swapArrayItem">
				<summary>function commonlib.swapArrayItem(t, nIndex1, nIndex2)&#13;&#10;swap two items in a table. 
				</summary>
				<parameter name="t"/>
				<parameter name="nIndex1"/>
				<parameter name="nIndex2"/>
			</function>
			<function line="552" name="moveArrayItem">
				<summary>function commonlib.moveArrayItem(t, nIndex1, nIndex2)&#13;&#10;move array item from one nIndex1 to nIndex2
				</summary>
				<parameter name="t"/>
				<parameter name="nIndex1"/>
				<parameter name="nIndex2"/>
			</function>
			<function line="568" name="moveArrayItemWithNum">
				<summary>function commonlib.moveArrayItemWithNum(t, nNum) --用时间换空间O(n^2)&#13;&#10;
				</summary>
				<parameter name="t"/>
				<parameter name="nNum"/>
			</function>
			<function line="593" name="quickMoveArrayItemWithNum">
				<summary>function commonlib.quickMoveArrayItemWithNum(t, nNum) --用空间换时间O(n)&#13;&#10;
				</summary>
				<parameter name="t"/>
				<parameter name="nNum"/>
			</function>
			<function line="662" name="SearchFiles">
				<summary>function commonlib.SearchFiles(...)&#13;&#10;OBSOLETED: use commonlib.Files.SearchFiles(), instead. 
				</summary>
			</function>
			<function line="668" name="Absolute">
				<summary>function commonlib.Absolute(num)&#13;&#10;get the absolute of the given number, if param not number type return nil
				</summary>
				<parameter name="num"/>
			</function>
			<function line="684" name="tonumber">
				<summary>function commonlib.tonumber(s)&#13;&#10;convert the string to number&#13;&#10;this function will handle the string will additional "0" digits in the front of the string&#13;&#10;e.x. input: "010" return: 10
				</summary>
				<parameter name="s"/>
			</function>
			<function line="701" name="tolower">
				<summary>function commonlib.tolower(o)&#13;&#10;make all table fields (including fields of sub tables) lower cased. This is useful for case-insensitive table.&#13;&#10; &#32; @param o: it will modify on this table and its sub-tables. If it is string. this function will return the lower cased string.&#13;&#10; &#32; @return: return the modified input 
				</summary>
				<parameter name="o">it will modify on this table and its sub-tables. If it is string. this function will return the lower cased string.
				</parameter>
				<returns>return return the modified input 
				</returns>
			</function>
			<function line="742" name="GetEmptyList">
				<summary>function commonlib.GetEmptyList(source_list,goal_num,bSort)&#13;&#10;-random search a number of item from a list&#13;&#10;&lt;verbatim&gt;&#13;&#10;local source_list = {&#13;&#10;	{ label = 1, isEmpty = true, },&#13;&#10;	{ label = 2, isEmpty = true, },&#13;&#10;	{ label = 3, isEmpty = false, },&#13;&#10;	{ label = 4, isEmpty = true, },&#13;&#10;}&lt;/verbatim&gt;&#13;&#10;local goal_num = 5;&#13;&#10;local result = commonlib.GetEmptyList(source_list,goal_num,true);&#13;&#10;commonlib.echo(result);&#13;&#10;-&#13;&#10; &#32; @param source_list: it is a table which will be searched&#13;&#10;-&#13;&#10; &#32; @param goal_num:the number of search from source_list;&#13;&#10;-NOTE:if #source_list &lt; goal_num then goal_num = #source_list;&#13;&#10;-return nil or a result table
				</summary>
				<parameter name="source_list">it is a table which will be searched&#13;&#10;-
				</parameter>
				<parameter name="goal_num">the number of search from source_list;&#13;&#10;-NOTE:if #source_list &lt; goal_num then goal_num = #source_list;&#13;&#10;-return nil or a result table
				</parameter>
				<parameter name="bSort"/>
			</function>
			<function line="795" name="GetRandomList">
				<summary>function commonlib.GetRandomList(source_num,goal_num,bSort)&#13;&#10;在一个范围内随机选取一定的数目&#13;&#10;goal_num = math.min(source_num,goal_num);&#13;&#10;返回一个table: result = {1,3,7}&#13;&#10;&#13;&#10;local result = commonlib.GetRandomList(10,5,true);&#13;&#10;commonlib.echo(result);
				</summary>
				<parameter name="source_num"/>
				<parameter name="goal_num"/>
				<parameter name="bSort"/>
			</function>
			<function line="821" name="GetRandomIndex">
				<summary>function commonlib.GetRandomIndex(range,excludeindex)&#13;&#10;在一个范围内随机选取一定的数目&#13;&#10;goal_num = math.min(source_num,goal_num);&#13;&#10;返回一个table: result = {1,3,7}&#13;&#10;&#13;&#10;local result = commonlib.GetRandomList(10,5,true);&#13;&#10;commonlib.echo(result);&#13;&#10;产生一个随机数&#13;&#10; &#32; @param range:随机的范围 大于等于0的整数&#13;&#10; &#32; @param excludeindex:不包含的整数
				</summary>
				<parameter name="range">随机的范围 大于等于0的整数
				</parameter>
				<parameter name="excludeindex">不包含的整数
				</parameter>
			</function>
			<function line="837" name="GetLimitLabel">
				<summary>function commonlib.GetLimitLabel(text, maxCharCount)&#13;&#10;
				</summary>
				<parameter name="text"/>
				<parameter name="maxCharCount"/>
			</function>
			<function line="848" name="GetUnicodeCharNum">
				<summary>function commonlib.GetUnicodeCharNum(text)&#13;&#10;
				</summary>
				<parameter name="text"/>
			</function>
			<function line="876" name="module">
				<summary>function commonlib.module(modname, ...)&#13;&#10;define a module, replace the global environment _G with that of the table.&#13;&#10;this function is same as commonlib.createtable, except that the global environment _G with that of the table.&#13;&#10; &#32; @param modname: namespace for module&#13;&#10; &#32; @return the module created
				</summary>
				<parameter name="modname">namespace for module
				</parameter>
				<returns>return module created
				</returns>
			</function>
			<function line="887" name="split">
				<summary>function commonlib.split(str,delimiter)&#13;&#10;define a module, replace the global environment _G with that of the table.&#13;&#10;this function is same as commonlib.createtable, except that the global environment _G with that of the table.&#13;&#10; &#32; @param modname: namespace for module&#13;&#10; &#32; @return the module created&#13;&#10;see all environment&#13;&#10;&#13;&#10;	local result = commonlib.split("a,b,c,d",",");&#13;&#10;	echo(result);
				</summary>
				<parameter name="str"/>
				<parameter name="delimiter"/>
				<returns>return module created&#13;&#10;see all environment&#13;&#10;&#13;&#10;	local result = commonlib.split("a,b,c,d",",");&#13;&#10;	echo(result);
				</returns>
			</function>
			<function line="907" name="split_by_str">
				<summary>function commonlib.split_by_str(str, delimiter)&#13;&#10;&#13;&#10;	字符串切割&#13;&#10;	local result = commonlib.split_by_str("aabaaba","ab");&#13;&#10;	echo(result, true);&#13;&#10;	输出 { "a", "a", "a" }&#13;&#10;	commonlib.split 的话这种情况会输出 {}
				</summary>
				<parameter name="str"/>
				<parameter name="delimiter"/>
			</function>
			<function line="930" name="debounce">
				<summary>function commonlib.debounce(func, delay)&#13;&#10;- TODO self?&#13;&#10;-&#13;&#10; &#32; @param func function&#13;&#10;-&#13;&#10; &#32; @param delay number&#13;&#10;-&#13;&#10; &#32; @return function
				</summary>
				<parameter name="func">function&#13;&#10;- 
				</parameter>
				<parameter name="delay">number&#13;&#10;- 
				</parameter>
				<returns>return 
				</returns>
			</function>
			<function line="946" name="find">
				<summary>function commonlib.find(arr, func)&#13;&#10;
				</summary>
				<parameter name="arr"/>
				<parameter name="func"/>
			</function>
			<function line="960" name="map">
				<summary>function commonlib.map(arr, func)&#13;&#10;
				</summary>
				<parameter name="arr"/>
				<parameter name="func"/>
			</function>
			<function line="972" name="filter">
				<summary>function commonlib.filter(arr, filterFunc)&#13;&#10;
				</summary>
				<parameter name="arr"/>
				<parameter name="filterFunc"/>
			</function>
			<function line="1009" name="keysorted_pairs">
				<summary>function commonlib.keysorted_pairs(t, sortFunc)&#13;&#10;&#13;&#10;	local t = &#13;&#10;	{&#13;&#10;		["a"] = 1;&#13;&#10;		["b"] = 2;&#13;&#10;	};&#13;&#10;	&#13;&#10;	for k, v in commonlib.keysorted_pairs(t) do&#13;&#10;		print(k, v);&#13;&#10;	end&#13;&#10;	&#13;&#10;	local function sortFunc(a, b)&#13;&#10;		if a.key == b.key then&#13;&#10;			return a.value &lt; b.value;&#13;&#10;		else&#13;&#10;			return a.key &lt; b.key;&#13;&#10;		end&#13;&#10;	end&#13;&#10;	for k, v in commonlib.keysorted_pairs(t, sortFunc) do	&#13;&#10;		print(k, v);&#13;&#10;	end
				</summary>
				<parameter name="t"/>
				<parameter name="sortFunc"/>
			</function>
			<function line="1034" name="ResolvePath">
				<summary>function commonlib.ResolvePath(...)&#13;&#10;echo(commonlib.ResolvePath("/a/b/c","d/e","f", "g/", "/h"))
				</summary>
			</function>
			<function line="1056" name="NumberToString">
				<summary>function commonlib.NumberToString(digit)&#13;&#10;此方法转换后带有单位&#13;&#10;-阿拉伯数字转中文大写
				</summary>
				<parameter name="digit"/>
			</function>
			<function line="1109" name="ParseXmlToString">
				<summary>function commonlib.ParseXmlToString(headon_mcml)&#13;&#10;
				</summary>
				<parameter name="headon_mcml"/>
			</function>
			<function line="1114" name="IsUtf8String">
				<summary>function commonlib.IsUtf8String(str)&#13;&#10;判断是否存在中文
				</summary>
				<parameter name="str"/>
			</function>
			<function line="1122" name="IsDirectory">
				<summary>function commonlib.IsDirectory(path)&#13;&#10;是否文件路径
				</summary>
				<parameter name="path"/>
			</function>
			<function line="1133" name="CompareVer">
				<summary>function commonlib.CompareVer(ver_1,ver_2)&#13;&#10;比较两个版本号，版本号最多4位
				</summary>
				<parameter name="ver_1"/>
				<parameter name="ver_2"/>
			</function>
			<function line="80" name="multi_inherit" src="script/ide/oo.lua">
				<summary>function commonlib.multi_inherit(...)&#13;&#10;multiple inheritance&#13;&#10;see. http://www.lua.org/pil/16.3.html
				</summary>
			</function>
			<function line="118" name="inherit" src="script/ide/oo.lua">
				<summary>function commonlib.inherit(baseClass, new_class, ctor)&#13;&#10;create a new class inheriting from a baseClass.&#13;&#10;the new class has new(), _super, isa() function.&#13;&#10; &#32; @param baseClass: the base class from which to inherit the new one. it can be nil if there is no base class.&#13;&#10;if it is string, baseClass = commonlib.gettable(baseClass) is used to obtain the class&#13;&#10; &#32; @param new_class: nil or a raw table. &#13;&#10;if it is string, new_class = commonlib.gettable(new_class) is used to obtain the class&#13;&#10; &#32; @param ctor: nil or the constructor function(o) end, one may init dynamic table fields in it. One can also define new_class:ctor() at a later time. &#13;&#10;note: inside ctor function, parent class virtual functions are not available,since meta table of parent is not set yet.&#13;&#10; &#32; @return the new class is created. One can later create and instance of the new class by calling its new function(). 
				</summary>
				<parameter name="baseClass">the base class from which to inherit the new one. it can be nil if there is no base class.&#13;&#10;if it is string, baseClass = commonlib.gettable(baseClass) is used to obtain the class
				</parameter>
				<parameter name="new_class">nil or a raw table. &#13;&#10;if it is string, new_class = commonlib.gettable(new_class) is used to obtain the class
				</parameter>
				<parameter name="ctor">nil or the constructor function(o) end, one may init dynamic table fields in it. One can also define new_class:ctor() at a later time. &#13;&#10;note: inside ctor function, parent class virtual functions are not available,since meta table of parent is not set yet.
				</parameter>
				<returns>return new class is created. One can later create and instance of the new class by calling its new function(). 
				</returns>
			</function>
			<function line="231" name="add_interface" src="script/ide/oo.lua">
				<summary>function commonlib.add_interface(target_class, interface_class)&#13;&#10;this function can be called multiple times for the same target_class with different interface_class&#13;&#10;It just copies all string_key, value pair from interface_class to target_class except for ctor and those that already exist in target_class.&#13;&#10;This is faster than multiple inheritance or single inheritance because the target_class contains all interface functions on its own meta table.&#13;&#10; &#32; @note: interface_class's ctor function is NOT called in target_class's ctor, one has to do it manually if required.&#13;&#10; &#32; @param target_class: new class to which the interface functions are copied to.&#13;&#10; &#32; @param interface_class: base interface class table. please note that this table must be fully loaded when this function is called. 
				</summary>
				<parameter name="target_class">new class to which the interface functions are copied to.
				</parameter>
				<parameter name="interface_class">base interface class table. please note that this table must be fully loaded when this function is called. 
				</parameter>
			</function>
			<function line="246" name="enable__gc" src="script/ide/oo.lua">
				<summary>function commonlib.enable__gc(target_class, gc_function)&#13;&#10;lua 5.1 does not support __gc for table object. it only supports __gc for userdata.&#13;&#10;this function can be called to enable __gc function to be called when object is garbage collected&#13;&#10;when target_class is garbage collected. see also `commonlib.setmetatable__gc`&#13;&#10; &#32; @param target_class: the table instance to which we will track garbage collection.&#13;&#10; &#32; @param gc_function: if nil, target_class.__gc is used. otherwise this function is used.
				</summary>
				<parameter name="target_class">the table instance to which we will track garbage collection.
				</parameter>
				<parameter name="gc_function">if nil, target_class.__gc is used. otherwise this function is used.
				</parameter>
			</function>
			<function line="32" name="echo" src="script/ide/serialization.lua">
				<summary>function commonlib.echo(p1, handleRecursion)&#13;&#10;output input to log safely in a single echo line (recursion is handled). Only used in debugging or testing&#13;&#10; &#32; @param p1: anything to echo, table, nil, value, function, etc.&#13;&#10; &#32; @param handleRecursion[obsoleted]: &#13;&#10;Note: recursion is handled by C++ side even if this is nil or false.&#13;&#10;if true, table recursion is handled. it may cause stack overflow if set to nil with recursive table&#13;&#10;Internally it uses commonlib.dump which handles recursive tables.
				</summary>
				<parameter name="p1">anything to echo, table, nil, value, function, etc.
				</parameter>
				<parameter name="handleRecursion">[obsoleted]: &#13;&#10;Note: recursion is handled by C++ side even if this is nil or false.&#13;&#10;if true, table recursion is handled. it may cause stack overflow if set to nil with recursive table&#13;&#10;Internally it uses commonlib.dump which handles recursive tables.
				</parameter>
			</function>
			<function line="48" name="serializeToFile" src="script/ide/serialization.lua">
				<summary>function commonlib.serializeToFile(file, o)&#13;&#10;serialize a table to the current file: function and user data are exported as nil value.&#13;&#10; &#32; @param o: table to serialize
				</summary>
				<parameter name="file"/>
				<parameter name="o">table to serialize
				</parameter>
			</function>
			<function line="93" name="serialize" src="script/ide/serialization.lua">
				<summary>function commonlib.serialize(o, bBeautify)&#13;&#10;serialize to string.&#13;&#10;e.g. print(commonlib.serialize(o))&#13;&#10; &#32; @param o: the object to serialize&#13;&#10; &#32; @param bBeautify: if true, it will generate with line breakings. if nil, it will use the C++ function to serialize. 
				</summary>
				<parameter name="o">the object to serialize
				</parameter>
				<parameter name="bBeautify">if true, it will generate with line breakings. if nil, it will use the C++ function to serialize. 
				</parameter>
			</function>
			<function line="132" name="serialize_in_length" src="script/ide/serialization.lua">
				<summary>function commonlib.serialize_in_length(o, nMaxLength)&#13;&#10;serialize to string. it will stop after string length is longer than nMaxLength.&#13;&#10; &#32; @param o: the object to serialize&#13;&#10; &#32; @param nMaxLength: default to 256 bytes. The maximum length of the returned string.&#13;&#10; &#32; @param bBeautify: if true, it will generate with line breakings. if nil, it will use the C++ function to serialize. 
				</summary>
				<parameter name="o">the object to serialize
				</parameter>
				<parameter name="nMaxLength">default to 256 bytes. The maximum length of the returned string.
				</parameter>
			</function>
			<function line="189" name="serialize_compact" src="script/ide/serialization.lua">
				<summary>function commonlib.serialize_compact(o, sortByKey) &#13;&#10;this is the fatest serialization method using native API. 
				</summary>
				<parameter name="o"/>
				<parameter name="sortByKey"/>
			</function>
			<function line="198" name="serialize_compact3" src="script/ide/serialization.lua">
				<summary>function commonlib.serialize_compact3(o)&#13;&#10;same as commonlib.serialize, except that it is more compact by removing all \r\n and comments, etc. 
				</summary>
				<parameter name="o"/>
			</function>
			<function line="264" name="LoadTableFromFile" src="script/ide/serialization.lua">
				<summary>function commonlib.LoadTableFromFile(filename)&#13;&#10;this function will return a table created from file. &#13;&#10;function may return nil&#13;&#10;e.g.&#13;&#10;local t = commonlib.LoadTableFromFile("temp/t.txt")&#13;&#10;if(t~=nil) then end
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="294" name="LoadTableFromString" src="script/ide/serialization.lua">
				<summary>function commonlib.LoadTableFromString(body)&#13;&#10;&#13;&#10; &#32; @param body: should be a string of "{ any thing here }". if table or other data type, it is returned as it is. &#13;&#10;return the table. 
				</summary>
				<parameter name="body">should be a string of "{ any thing here }". if table or other data type, it is returned as it is. &#13;&#10;return the table. 
				</parameter>
			</function>
			<function line="309" name="totable" src="script/ide/serialization.lua">
				<summary>function commonlib.totable(msg)&#13;&#10;convert msg to table, if msg can not be serialized to table, we will return {[1] = msg}&#13;&#10;return a table 
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="322" name="SaveTableToFile" src="script/ide/serialization.lua">
				<summary>function commonlib.SaveTableToFile(o, filename, bBeautified)&#13;&#10;this function will return a table created from file.&#13;&#10; &#32; @param bBeautified: true to enable indentation which is well organized and easy to read the table structure&#13;&#10;function may return nil.e.g.&#13;&#10;local t = {test=1};&#13;&#10;commonlib.SaveTableToFile(t, "temp/t.txt");
				</summary>
				<parameter name="o"/>
				<parameter name="filename"/>
				<parameter name="bBeautified">true to enable indentation which is well organized and easy to read the table structure&#13;&#10;function may return nil.e.g.&#13;&#10;local t = {test=1};&#13;&#10;commonlib.SaveTableToFile(t, "temp/t.txt");
				</parameter>
			</function>
			<function line="342" name="serialize2" src="script/ide/serialization.lua">
				<summary>function commonlib.serialize2(o, lvl)&#13;&#10;serialize to string&#13;&#10;serialization will be well organized and easy to read the table structure&#13;&#10;e.g. print(commonlib.serialize(o, 1))
				</summary>
				<parameter name="o"/>
				<parameter name="lvl"/>
			</function>
			<function line="383" name="WriteTextToFile" src="script/ide/serialization.lua">
				<summary>function commonlib.WriteTextToFile(o, filename)&#13;&#10;dump text or lines. it will automatically create directory for you.&#13;&#10; &#32; @param filename: which file to write to. it will replace whatever in the file.&#13;&#10; &#32; @param o: it can be text string or table array containing text lines, which are concartinated. It does NOT add line endings. &#13;&#10;commonlib.SaveTableToFile({"hello ", "world!"}, "temp/t.txt");
				</summary>
				<parameter name="o">it can be text string or table array containing text lines, which are concartinated. It does NOT add line endings. &#13;&#10;commonlib.SaveTableToFile({"hello ", "world!"}, "temp/t.txt");
				</parameter>
				<parameter name="filename">which file to write to. it will replace whatever in the file.
				</parameter>
			</function>
			<function line="508" name="dump" src="script/ide/serialization.lua">
				<summary>function commonlib.dump(value, varname, fastmode, ident)&#13;&#10;LiXizhi 2008.5.15: I modified to disable function and userdata dumping. &#13;&#10;DataDumper consists of a single Lua function, which could easily be put in a separate module or integrated into a bigger one. &#13;&#10;The function has four parameters, but only the first one is mandatory. It always returns a string value, which is valid Lua code. &#13;&#10;Simply executing this chunk will import back to a variable the complete structure of the original variable.&#13;&#10;For simple structures, there is only one Lua instruction like a table constructor, but some more complex features will output a script with more instructions. &#13;&#10;&#13;&#10;All the following language features are supported: &#13;&#10;&#13;&#10;Simple Lua types: nil, boolean, number, string &#13;&#10;Tables are dumped recursively &#13;&#10;Table metatables are also dumped recursively &#13;&#10;Simple Lua functions (no upvalue) are dumped with loadstring &#13;&#10;Lua closures with upvalues are also supported, using the debug library! &#13;&#10;Known C functions are output using their original name &#13;&#10;Complex tables structures with internal references are supported&#13;&#10; &#32; @param value can be of any supported type&#13;&#10; &#32; @param varname: optional variable name. Depending on its form, the output will look like: &#13;&#10;	nil: "return value" &#13;&#10;	identifier: "varname = value" &#13;&#10;	other: "varname".."value"&#13;&#10; &#32; @param fastmode is a boolean value: &#13;&#10;	true: optimizes for speed. Metatables, closures, C functions and references are not supported. Returns a code chunk without any space or new line! &#13;&#10;	false: supports all advanced features and favors readable code with good indentation.&#13;&#10; &#32; @param indent: the number of additional indentation level. Default is 0. 
				</summary>
				<parameter name="value">can be of any supported type
				</parameter>
				<parameter name="varname">optional variable name. Depending on its form, the output will look like: &#13;&#10;	nil: "return value" &#13;&#10;	identifier: "varname = value" &#13;&#10;	other: "varname".."value"
				</parameter>
				<parameter name="fastmode">is a boolean value: &#13;&#10;	true: optimizes for speed. Metatables, closures, C functions and references are not supported. Returns a code chunk without any space or new line! &#13;&#10;	false: supports all advanced features and favors readable code with good indentation.
				</parameter>
				<parameter name="ident"/>
			</function>
			<function line="671" name="fromCSV" src="script/ide/serialization.lua">
				<summary>function commonlib.fromCSV(s)&#13;&#10;Convert from CSV string to table
				</summary>
				<parameter name="s"/>
			</function>
			<function line="698" name="toCSV" src="script/ide/serialization.lua">
				<summary>function commonlib.toCSV(tt)&#13;&#10;Convert from table to CSV string
				</summary>
				<parameter name="tt"/>
			</function>
		</table>
		<table name="algorithm" src="script/ide/commonlib.lua">
			<function line="189" name="sort_by_predicate">
				<summary>function algorithm.sort_by_predicate(input, predicate_func)&#13;&#10;in place sort of the input list. the item order is unchanged for those who passed and not passed the predicate test.&#13;&#10; &#32; @param input: a table array&#13;&#10; &#32; @param predicate_func: a function(item) that should return true, if item should come before that that return false. 
				</summary>
				<parameter name="input">a table array
				</parameter>
				<parameter name="predicate_func">a function(item) that should return true, if item should come before that that return false. 
				</parameter>
			</function>
		</table>
		<table name="table" src="script/ide/commonlib.lua">
			<function line="508" name="resize">
				<summary>function table.resize(t, size, v)&#13;&#10;resize a table to a new size. It ensures that all elements are nil.&#13;&#10; &#32; @param t: table to resize&#13;&#10; &#32; @param size: the new size&#13;&#10; &#32; @param v: the item value;
				</summary>
				<parameter name="t">table to resize
				</parameter>
				<parameter name="size">the new size
				</parameter>
				<parameter name="v">the item value;
				</parameter>
			</function>
		</table>
		<table name="utf8" src="script/ide/commonlib.lua">
			<function line="634" name="len">
				<summary>function utf8.len(unicode_string)&#13;&#10;return the number of characters in UTF8 encoding.&#13;&#10;more info at: http://lua-users.org/wiki/LuaUnicode
				</summary>
				<parameter name="unicode_string"/>
			</function>
			<function line="640" name="sub">
				<summary>function utf8.sub(ustring, nFrom, nTo)&#13;&#10;similar to string.sub(), except that nFrom, nTo refers to characters, instead of byte
				</summary>
				<parameter name="ustring"/>
				<parameter name="nFrom"/>
				<parameter name="nTo"/>
			</function>
		</table>
		<table name="Encoding" src="script/ide/Encoding.lua">
			<function line="31" name="Utf8ToDefault">
				<summary>function Encoding.Utf8ToDefault(text)&#13;&#10;
				</summary>
				<parameter name="text"/>
			</function>
			<function line="35" name="DefaultToUtf8">
				<summary>function Encoding.DefaultToUtf8(text)&#13;&#10;
				</summary>
				<parameter name="text"/>
			</function>
			<function line="39" name="Utf8ToUtf16">
				<summary>function Encoding.Utf8ToUtf16(text)&#13;&#10;
				</summary>
				<parameter name="text"/>
			</function>
			<function line="43" name="Utf16ToUtf8">
				<summary>function Encoding.Utf16ToUtf8(text)&#13;&#10;
				</summary>
				<parameter name="text"/>
			</function>
			<function line="48" name="DetectTextIsUtf8Encoding">
				<summary>function Encoding.DetectTextIsUtf8Encoding(text)&#13;&#10;this may not be reliable, but works in most cases. It will convert to default and then back.
				</summary>
				<parameter name="text"/>
			</function>
			<function line="62" name="SortCSVString">
				<summary>function Encoding.SortCSVString(fields)&#13;&#10;sort commar separated vector (CSV) string alphabetically&#13;&#10; &#32; @param fields: string such as "C,B,A", or a table containing string arrays such as {"C", "B", "A"}&#13;&#10; &#32; @return return a new CSV string "A,B,C"
				</summary>
				<parameter name="fields">string such as "C,B,A", or a table containing string arrays such as {"C", "B", "A"}
				</parameter>
				<returns>return a new CSV string "A,B,C"
				</returns>
			</function>
			<function line="85" name="EncodeStr">
				<summary>function Encoding.EncodeStr(s)&#13;&#10;sort commar separated vector (CSV) string alphabetically&#13;&#10; &#32; @param fields: string such as "C,B,A", or a table containing string arrays such as {"C", "B", "A"}&#13;&#10; &#32; @return return a new CSV string "A,B,C"
				</summary>
				<parameter name="s"/>
				<returns>return a new CSV string "A,B,C"
				</returns>
			</function>
			<function line="96" name="EncodeHTMLInnerText">
				<summary>function Encoding.EncodeHTMLInnerText(s)&#13;&#10;
				</summary>
				<parameter name="s"/>
			</function>
			<function line="107" name="EncodeHTMLInnerTextWithSpace">
				<summary>function Encoding.EncodeHTMLInnerTextWithSpace(s)&#13;&#10;
				</summary>
				<parameter name="s"/>
			</function>
			<function line="119" name="HasXMLEscapeChar">
				<summary>function Encoding.HasXMLEscapeChar(s)&#13;&#10;
				</summary>
				<parameter name="s"/>
			</function>
			<function line="139" name="split">
				<summary>function Encoding.split(data, eol, width)&#13;&#10;---------------------------------------------------------------------------&#13;&#10;Break a string in lines of equal size&#13;&#10;Input &#13;&#10;data: string to be broken &#13;&#10;eol: end of line marker&#13;&#10;width: width of output string lines&#13;&#10;Returns&#13;&#10;string broken in lines&#13;&#10;---------------------------------------------------------------------------
				</summary>
				<parameter name="data"/>
				<parameter name="eol"/>
				<parameter name="width"/>
			</function>
			<function line="157" name="base64">
				<summary>function Encoding.base64(s, single)&#13;&#10;---------------------------------------------------------------------------&#13;&#10;Encodes a string into its base64 representation&#13;&#10;Input &#13;&#10;s: binary string to be encoded&#13;&#10;single: single line output?&#13;&#10;Returns&#13;&#10;string with corresponding base64 representation&#13;&#10;---------------------------------------------------------------------------
				</summary>
				<parameter name="s"/>
				<parameter name="single"/>
			</function>
			<function line="175" name="unbase64">
				<summary>function Encoding.unbase64(s)&#13;&#10;---------------------------------------------------------------------------&#13;&#10;Decodes a string from its base64 representation&#13;&#10;Input &#13;&#10;s: base64 string&#13;&#10;Returns&#13;&#10;decoded binary string&#13;&#10;---------------------------------------------------------------------------
				</summary>
				<parameter name="s"/>
			</function>
			<function line="189" name="PasswordEncodeWithMac">
				<summary>function Encoding.PasswordEncodeWithMac(text)&#13;&#10;encode with mac address. 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="197" name="PasswordDecodeWithMac">
				<summary>function Encoding.PasswordDecodeWithMac(text)&#13;&#10;return nil if mac address does not match with the local one. 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="218" name="EncodeServerData">
				<summary>function Encoding.EncodeServerData(input)&#13;&#10;used in poweritem api ChangeItem.&#13;&#10; &#32; @param input:either string or table.&#13;&#10; &#32; @return the server data string or nil.
				</summary>
				<parameter name="input">either string or table.
				</parameter>
				<returns>return server data string or nil.
				</returns>
			</function>
			<function line="231" name="DecodeServerData">
				<summary>function Encoding.DecodeServerData(input)&#13;&#10;
				</summary>
				<parameter name="input"/>
			</function>
			<function line="244" name="EncodeServerDataString">
				<summary>function Encoding.EncodeServerDataString(input)&#13;&#10;
				</summary>
				<parameter name="input"/>
			</function>
			<function line="253" name="url_decode">
				<summary>function Encoding.url_decode(str)&#13;&#10;Decode an URL-encoded string&#13;&#10;(Note that you should only decode a URL string after splitting it; this allows you to correctly process quoted "?" characters in the query string or base part, for instance.) 
				</summary>
				<parameter name="str"/>
			</function>
			<function line="262" name="url_encode">
				<summary>function Encoding.url_encode(str)&#13;&#10;URL-encode a string
				</summary>
				<parameter name="str"/>
			</function>
		</table>
		<table name="Timer" src="script/ide/timer.lua">
			<function line="75" name="new">
				<summary>function Timer:new(o)&#13;&#10;a new timer class with infinite time. 
				</summary>
				<parameter name="o"/>
			</function>
			<function line="91" name="GetNextTimerID">
				<summary>function Timer.GetNextTimerID()&#13;&#10;get the next timer id
				</summary>
			</function>
			<function line="101" name="Change">
				<summary>function Timer:Change(dueTime,period)&#13;&#10;change the timer&#13;&#10; &#32; @param dueTime The amount of time to delay before the invoking the callback method specified in milliseconds&#13;&#10;Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.&#13;&#10; &#32; @param period The time interval between invocations of the callback method in milliseconds. &#13;&#10;Specify nil to disable periodic signaling. 
				</summary>
				<parameter name="dueTime">The amount of time to delay before the invoking the callback method specified in milliseconds&#13;&#10;Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.
				</parameter>
				<parameter name="period">The time interval between invocations of the callback method in milliseconds. &#13;&#10;Specify nil to disable periodic signaling. 
				</parameter>
			</function>
			<function line="114" name="Enable">
				<summary>function Timer:Enable()&#13;&#10;call this function to enable the timer if not 
				</summary>
			</function>
			<function line="123" name="Tick">
				<summary>function Timer:Tick(nTickCount)&#13;&#10;this function is called by the timer manager to process the time. &#13;&#10;set the tick count. it will return true, if the timer is activated. &#13;&#10;call this function regularly with new tick count.&#13;&#10; &#32; @param nTickCount: it should be ::GetTickCount() in millisecond. if nil, we will call the system ::GetTickCount() to get the current tick count.&#13;&#10; &#32; @return true if timer is activated. 
				</summary>
				<parameter name="nTickCount">it should be ::GetTickCount() in millisecond. if nil, we will call the system ::GetTickCount() to get the current tick count.
				</parameter>
				<returns>return if timer is activated. 
				</returns>
			</function>
			<function line="143" name="GetDelta">
				<summary>function Timer:GetDelta(max_delta)&#13;&#10;get the delta in time since last tick.&#13;&#10; &#32; @param max_delta: if the delta is bigger than this value we will return max_delta rather than the big value. &#13;&#10;if this is nil, it will be 2 times of self.period
				</summary>
				<parameter name="max_delta">if the delta is bigger than this value we will return max_delta rather than the big value. &#13;&#10;if this is nil, it will be 2 times of self.period
				</parameter>
			</function>
			<function line="157" name="Activate">
				<summary>function Timer:Activate()&#13;&#10;activate the call back. 
				</summary>
			</function>
			<function line="165" name="IsEnabled">
				<summary>function Timer:IsEnabled()&#13;&#10;whether the timer is going to be called at least once in the future. &#13;&#10;NOTE: this may not be accurate if scene is reset. 
				</summary>
			</function>
		</table>
		<table name="TimerManager" src="script/ide/timer.lua">
			<function line="181" name="Start">
				<summary>function TimerManager.Start()&#13;&#10;create a global timer for all sub timers. 
				</summary>
			</function>
			<function line="189" name="Stop">
				<summary>function TimerManager.Stop()&#13;&#10;
				</summary>
			</function>
			<function line="193" name="Restart">
				<summary>function TimerManager.Restart()&#13;&#10;
				</summary>
			</function>
			<function line="199" name="CheckTimer">
				<summary>function TimerManager.CheckTimer()&#13;&#10;check if c++ timer is still valid
				</summary>
			</function>
			<function line="207" name="Clear">
				<summary>function TimerManager.Clear()&#13;&#10;clear all timers
				</summary>
			</function>
			<function line="217" name="AddTimer">
				<summary>function TimerManager.AddTimer(timer)&#13;&#10;call this function to either add a timer to the pool or change the timer settings. &#13;&#10;it will automatically set timer.enabled to true.&#13;&#10; &#32; @param timer: the timer object
				</summary>
				<parameter name="timer">the timer object
				</parameter>
			</function>
			<function line="238" name="RemoveTimer">
				<summary>function TimerManager.RemoveTimer(timer)&#13;&#10;remove the given timer by id
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="247" name="DumpTimerCount">
				<summary>function TimerManager.DumpTimerCount()&#13;&#10;dump timer info. 
				</summary>
			</function>
			<function line="263" name="OnTimer">
				<summary>function TimerManager.OnTimer()&#13;&#10;the global ParaEngine high resolution timer. 
				</summary>
			</function>
			<function line="295" name="GetCurrentTime">
				<summary>function TimerManager.GetCurrentTime()&#13;&#10;get the current time in millisecond. This may be faster than ParaGlobal_timeGetTime() since it is updated only at rendering frame rate.&#13;&#10; &#32; @note the resolution of the timer is same as the scripting frame move rate.
				</summary>
			</function>
			<function line="300" name="timeGetTime">
				<summary>function TimerManager.timeGetTime()&#13;&#10;same as ParaGlobal.timeGetTime(), it does not cache, but using the current system time. 
				</summary>
			</function>
			<function line="307" name="SetInterval">
				<summary>function TimerManager.SetInterval(func, milliSecond)&#13;&#10;wait a specified number of milliseconds, and then execute a specified function, &#13;&#10;and it will continue to execute the function, once at every given time-interval.&#13;&#10; &#32; @return the timer object which can be used to call ClearInterval
				</summary>
				<parameter name="func"/>
				<parameter name="milliSecond"/>
				<returns>return timer object which can be used to call ClearInterval
				</returns>
			</function>
			<function line="313" name="ClearInterval">
				<summary>function TimerManager.ClearInterval(timer)&#13;&#10;
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="323" name="SetTimeout">
				<summary>function TimerManager.SetTimeout(func, milliSecond, timerName)&#13;&#10;create a timer object that will timeout once and call func.&#13;&#10; &#32; @param milliSecond: default to 1000ms (1 second)&#13;&#10; &#32; @param timerName: if nil, a new timer will always be created for this timeout, if not, we will reuse the same timer object. &#13;&#10;and reset the timeout, if the same timer is being called in short interval.&#13;&#10; &#32; @return the timer object. 
				</summary>
				<parameter name="func"/>
				<parameter name="milliSecond">default to 1000ms (1 second)
				</parameter>
				<parameter name="timerName">if nil, a new timer will always be created for this timeout, if not, we will reuse the same timer object. &#13;&#10;and reset the timeout, if the same timer is being called in short interval.
				</parameter>
				<returns>return timer object. 
				</returns>
			</function>
			<function line="339" name="ClearTimeout">
				<summary>function TimerManager.ClearTimeout(timeoutVariable)&#13;&#10;
				</summary>
				<parameter name="timeoutVariable"/>
			</function>
		</table>
		<table name="NPL" src="script/ide/NPLExtension.lua">
			<function line="41" name="GetURL">
				<summary>function NPL.GetURL(url, callbackFunc, option)&#13;&#10;return the content of a given url. &#13;&#10;e.g. &#32;echo(NPL.GetURL("www.paraengine.com"))&#13;&#10; &#32; @param url: url string or a options table of {url=string, form={key=value}, headers={key=value, "line strings"}, json=bool, qs={}}&#13;&#10;if .json is true, code will be decoded as json.&#13;&#10;if .qs is query string table&#13;&#10; &#32; @param callbackFunc: a function(err, msg, data) end, &#13;&#10;where msg is the raw HTTP message {header, code=0, rcode=200, data}&#13;&#10;if nil, the function will not return until result is returned(sync call).&#13;&#10; &#32; @param option: mostly nil. "-I" for headers only&#13;&#10; &#32; @return: return nil if callbackFunc is a function. or the string content in sync call. 
				</summary>
				<parameter name="url">url string or a options table of {url=string, form={key=value}, headers={key=value, "line strings"}, json=bool, qs={}}&#13;&#10;if .json is true, code will be decoded as json.&#13;&#10;if .qs is query string table
				</parameter>
				<parameter name="callbackFunc">a function(err, msg, data) end, &#13;&#10;where msg is the raw HTTP message {header, code=0, rcode=200, data}&#13;&#10;if nil, the function will not return until result is returned(sync call).
				</parameter>
				<parameter name="option">mostly nil. "-I" for headers only
				</parameter>
				<returns>return return nil if callbackFunc is a function. or the string content in sync call. 
				</returns>
			</function>
			<function line="50" name="activate_with_timeout">
				<summary>function NPL.activate_with_timeout(timeout_seconds, ...)&#13;&#10;this function just repeatedly calls NPL.activate() until either the message is successfully sent out or timeout_seconds is reached. &#13;&#10;Internally, it will wait 0.1, 0.2, 0.4, 0.8, ... between unsuccessfull activation.&#13;&#10; &#32; @param timeout_seconds: the number of seconds to wait. if 0, it will only try once.&#13;&#10; &#32; @return the last NPL.activate call result
				</summary>
				<parameter name="timeout_seconds">the number of seconds to wait. if 0, it will only try once.
				</parameter>
				<returns>return last NPL.activate call result
				</returns>
			</function>
			<function line="73" name="activate_async_with_timeout">
				<summary>function NPL.activate_async_with_timeout(timeout_seconds, filename, msg)&#13;&#10;This function is same as NPL.activate() except that if it failed. It will start a timer and send the message again and again until timeout_seconds passed. &#13;&#10;this function just repeatedly calls NPL.activate() until either the message is successfully sent out or timeout_seconds is reached. &#13;&#10;Internally, it will wait 0.1, 0.2, 0.4, 0.8, ... between unsuccessfull activation.&#13;&#10; &#32; @param timeout_seconds: the number of seconds to wait. if 0, it will only try once.&#13;&#10; &#32; @return the last NPL.activate call result
				</summary>
				<parameter name="timeout_seconds">the number of seconds to wait. if 0, it will only try once.
				</parameter>
				<parameter name="filename"/>
				<parameter name="msg"/>
				<returns>return last NPL.activate call result
				</returns>
			</function>
			<function line="109" name="ResetAllCookies">
				<summary>function NPL.ResetAllCookies()&#13;&#10;name, value pairs or tables. &#13;&#10;nil means never expires. &#13;&#10;reset all cookies for all urls to empty.
				</summary>
			</function>
			<function line="118" name="SetCookie">
				<summary>function NPL.SetCookie(url, cookie)&#13;&#10;set cookies for a given url.&#13;&#10; &#32; @param url: it is usually a web service or web page url string.&#13;&#10; &#32; @param cookies: it should be nil or a cookie table. Usually it is a table with &#13;&#10;{Data={user_id="GUID", session_key="GUID", app_key="GUID", counter=functor}, ExpireTime=nil }&#13;&#10;counter will be supported later on, which will automatically increase by one or use the current system time in milliseconds. 
				</summary>
				<parameter name="url">it is usually a web service or web page url string.
				</parameter>
				<parameter name="cookie"/>
			</function>
			<function line="127" name="AddCookieVariable">
				<summary>function NPL.AddCookieVariable(url, name, value, ExpireTime)&#13;&#10;add a cookie variable to a given URL.&#13;&#10; &#32; @param url: it is usually a web service or web page url string.&#13;&#10; &#32; @param name: string such as "session_key", "user_id"&#13;&#10; &#32; @param value: string or value&#13;&#10; &#32; @param ExpireTime: can be nil or a value. It will only be set if ExpireTime is smaller than the current cookie's expire time. 
				</summary>
				<parameter name="url">it is usually a web service or web page url string.
				</parameter>
				<parameter name="name">string such as "session_key", "user_id"
				</parameter>
				<parameter name="value">string or value
				</parameter>
				<parameter name="ExpireTime">can be nil or a value. It will only be set if ExpireTime is smaller than the current cookie's expire time. 
				</parameter>
			</function>
			<function line="143" name="GetCookie">
				<summary>function NPL.GetCookie(url)&#13;&#10;get the cookies table by url. it may return nil if the cookie does not exist. 
				</summary>
				<parameter name="url"/>
			</function>
			<function line="151" name="MergeCookieWithMsg">
				<summary>function NPL.MergeCookieWithMsg(msg, cookie)&#13;&#10;if msg={user_id="GUID1", somefields="XXX"} and cookies={user_id="GUID2", session_key="GUID", app_key="GUID",}, the msg will become&#13;&#10;{user_id="GUID1", somefields="XXX", session_key="GUID", app_key="GUID",} after this function returns.&#13;&#10; &#32; @param msg: in/out msg table.&#13;&#10; &#32; @param cookie: it can be nil, it is usually the cookies table returned from NPL.GetCookie(url)
				</summary>
				<parameter name="msg">in/out msg table.
				</parameter>
				<parameter name="cookie">it can be nil, it is usually the cookies table returned from NPL.GetCookie(url)
				</parameter>
			</function>
			<function line="163" name="CallWebservice">
				<summary>function NPL.CallWebservice(URL, msg)&#13;&#10;call a web service with data cookie support. One can bind a cookie object with a given URL. The cookie object will to copied to the msg data before sending&#13;&#10; &#32; @param URL: url of the web service&#13;&#10; &#32; @param msg: an NPL table to be sent. If there is a cookie object, it will be copied to data before sending. such as the user_id, session_id, app_key, counter, etc. 
				</summary>
				<parameter name="URL">url of the web service
				</parameter>
				<parameter name="msg">an NPL table to be sent. If there is a cookie object, it will be copied to data before sending. such as the user_id, session_id, app_key, counter, etc. 
				</parameter>
			</function>
			<function line="169" name="GetSrcUserName">
				<summary>function NPL.GetSrcUserName()&#13;&#10;retrieve the user name from the current packet's source name. return "" if no username is found.
				</summary>
			</function>
			<function line="188" name="SyncFile">
				<summary>function NPL.SyncFile(FileUrl, DestFolder, ScriptCallBack, DownloaderName)&#13;&#10;sync a file with a remote server&#13;&#10;This function is very similar to NPL.AsyncDownload() except that FileUrl may contain CRC code&#13;&#10;and that if will not perform the actual download if the DestFolder is a file with the right CRC&#13;&#10;e.g.&#13;&#10;NPL.SyncFile("http://www.kids3dmovie.com/uploads/LiXizhi/auto2.jpg?CRC32=507094163", "temp\\renamed.jpg", "DownloadCallback()", "test1");&#13;&#10; &#32; @param FileUrl: it may be a URL that ends with ?CRC32=number, such as http://www.kids3dmovie.com/test.jpg?CRC32=1234&#13;&#10; &#32; @param ScriptCallBack: a gobal variable called &#13;&#10;msg = {DownloadState=""|"complete"|"terminated", totalFileSize=number, currentFileSize=number, PercentDone=number} is the input. msg may be nil if any error occurs.&#13;&#10; &#32; @return: &#32;1 it is downloading; 2 downloading is done because a file already exist with the currect CRC32 code
				</summary>
				<parameter name="FileUrl">it may be a URL that ends with ?CRC32=number, such as http://www.kids3dmovie.com/test.jpg?CRC32=1234
				</parameter>
				<parameter name="DestFolder"/>
				<parameter name="ScriptCallBack">a gobal variable called &#13;&#10;msg = {DownloadState=""|"complete"|"terminated", totalFileSize=number, currentFileSize=number, PercentDone=number} is the input. msg may be nil if any error occurs.
				</parameter>
				<parameter name="DownloaderName"/>
				<returns>return 1 it is downloading; 2 downloading is done because a file already exist with the currect CRC32 code
				</returns>
			</function>
			<function line="231" name="DeleteAllDownloadTempFiles">
				<summary>function NPL.DeleteAllDownloadTempFiles()&#13;&#10;all temp file due to NPL.SyncFile() is deleted. Perhaps, this function should be called once several weeks
				</summary>
			</function>
			<function line="235" name="SyncFileCallBack">
				<summary>function NPL.SyncFileCallBack(DestFolder, tempfile)&#13;&#10;
				</summary>
				<parameter name="DestFolder"/>
				<parameter name="tempfile"/>
			</function>
			<function line="251" name="CheckLoad">
				<summary>function NPL.CheckLoad(filename)&#13;&#10;this is same as NPL.load, except that it only load local script file without the "(gl)" prefix. &#13;&#10;and it will check the file existence in both source folder and bin folder before loading the file. &#13;&#10;if file is not found in the first place, NPL.load() is not called at all. and the function will return nil.&#13;&#10; &#32; @return : true if loaded. 
				</summary>
				<parameter name="filename"/>
				<returns>return true if loaded. 
				</returns>
			</function>
			<function line="259" name="DoesFileExist">
				<summary>function NPL.DoesFileExist(filename)&#13;&#10;if a given script or other file exist. it will also check precompiled file
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="266" name="LoadPublicFilesFromXML">
				<summary>function NPL.LoadPublicFilesFromXML(filename)&#13;&#10;load public NPL file to id map from XML file.&#13;&#10; &#32; @param filename: if nil, it defaults to config/NPLPublicFiles.xml
				</summary>
				<parameter name="filename">if nil, it defaults to config/NPLPublicFiles.xml
				</parameter>
			</function>
		</table>
		<table name="os" src="script/ide/System/os/os.lua">
			<function line="21" name="GetPlatform">
				<summary>function os.GetPlatform()&#13;&#10;&#13;&#10; &#32; @return "win32", "linux", "android", "ios", "mac"
				</summary>
				<returns>return "win32", "linux", "android", "ios", "mac"
				</returns>
			</function>
			<function line="47" name="GetParaEngineVersion">
				<summary>function os.GetParaEngineVersion()&#13;&#10;
				</summary>
			</function>
			<function line="58" name="CompareParaEngineVersion">
				<summary>function os.CompareParaEngineVersion(ver)&#13;&#10;
				</summary>
				<parameter name="ver"/>
			</function>
			<function line="82" name="IsWindowsXP">
				<summary>function os.IsWindowsXP()&#13;&#10;if it is old system
				</summary>
			</function>
			<function line="97" name="IsEmscripten">
				<summary>function os.IsEmscripten()&#13;&#10;
				</summary>
			</function>
			<function line="102" name="IsMobilePlatform">
				<summary>function os.IsMobilePlatform()&#13;&#10;return true if is mobile device
				</summary>
			</function>
			<function line="111" name="IsTouchMode">
				<summary>function os.IsTouchMode()&#13;&#10;return true if touch mode
				</summary>
			</function>
			<function line="120" name="Is64BitsSystem">
				<summary>function os.Is64BitsSystem()&#13;&#10;return true if it is 64 bits system. 
				</summary>
			</function>
			<function line="130" name="args">
				<summary>function os.args(name, default_value)&#13;&#10;get command line argument&#13;&#10; &#32; @param name: argument name&#13;&#10; &#32; @param default_value: default value
				</summary>
				<parameter name="name">argument name
				</parameter>
				<parameter name="default_value">default value
				</parameter>
			</function>
			<function line="135" name="GetCurrentProcessId">
				<summary>function os.GetCurrentProcessId()&#13;&#10;get process id
				</summary>
			</function>
			<function line="145" name="GetExternalStoragePath">
				<summary>function os.GetExternalStoragePath()&#13;&#10;this is "" on PC, but is valid on android/ios mobile devices. &#13;&#10;this will always ends with "/"
				</summary>
			</function>
			<function line="163" name="GetWritablePath">
				<summary>function os.GetWritablePath()&#13;&#10;a writable directory. on Android,iOS this is the default app internal storage. &#13;&#10;when app is uninstalled, data in this directory will be gone. 
				</summary>
			</function>
			<function line="170" name="GetPCStats">
				<summary>function os.GetPCStats()&#13;&#10;get a table containing all kinds of stats for this computer.&#13;&#10; &#32; @return {videocard, os, memory, ps, vs}
				</summary>
				<returns>return {videocard, os, memory, ps, vs}
				</returns>
			</function>
			<function line="227" name="GetUrl" src="script/ide/System/os/GetUrl.lua">
				<summary>function os.GetUrl(url, callbackFunc, option)&#13;&#10;return the content of a given url. &#13;&#10;e.g. &#32;System.os.GetUrl("www.paraengine.com", function(rcode, msg, data) end)&#13;&#10; &#32; @param url: url string or a options table of {url=string, postfields=string, form={key=value}, headers={key=value, "line strings"}, json=bool, qs={}}&#13;&#10;.form is optional key, value pair table.&#13;&#10;if .json is true, form will be encoded in json.&#13;&#10;if .method is optinal or "PUT|DELETE", by default it is get/post request&#13;&#10;if .qs is query string table&#13;&#10;if .postfields is a binary string to be passed in the request body. If this is present, form parameter will be ignored. &#13;&#10;if .headers is a table, it contains additional http request headers to be added&#13;&#10;if .options is a table, it contains additional curl options, &#13;&#10;such as {CURLOPT_PROXY="ip:port", CURLOPT_CAINFO = string, CURLOPT_SSLCERT = string, CURLOPT_SSLKEY = string, etc}, see curl doc for more information.&#13;&#10; &#32; @param callbackFunc: a function(rcode, msg, data) end, if nil, the function will not return until result is returned(sync call).&#13;&#10;`rcode` is http return code, such as 200 for success, which is same as `msg.rcode`&#13;&#10;`msg` is the raw HTTP message {header, code=0, rcode=200, data}&#13;&#10;`data` contains the translated response data if data format is a known format like json&#13;&#10;or it contains the binary response body from server, which is same as `msg.data`&#13;&#10; &#32; @param option: mostly nil. "-I" for headers only&#13;&#10; &#32; @return: return nil if callbackFunc is a function. or (rcode, msg, data) in sync call. 
				</summary>
				<parameter name="url">url string or a options table of {url=string, postfields=string, form={key=value}, headers={key=value, "line strings"}, json=bool, qs={}}&#13;&#10;.form is optional key, value pair table.&#13;&#10;if .json is true, form will be encoded in json.&#13;&#10;if .method is optinal or "PUT|DELETE", by default it is get/post request&#13;&#10;if .qs is query string table&#13;&#10;if .postfields is a binary string to be passed in the request body. If this is present, form parameter will be ignored. &#13;&#10;if .headers is a table, it contains additional http request headers to be added&#13;&#10;if .options is a table, it contains additional curl options, &#13;&#10;such as {CURLOPT_PROXY="ip:port", CURLOPT_CAINFO = string, CURLOPT_SSLCERT = string, CURLOPT_SSLKEY = string, etc}, see curl doc for more information.
				</parameter>
				<parameter name="callbackFunc">a function(rcode, msg, data) end, if nil, the function will not return until result is returned(sync call).&#13;&#10;`rcode` is http return code, such as 200 for success, which is same as `msg.rcode`&#13;&#10;`msg` is the raw HTTP message {header, code=0, rcode=200, data}&#13;&#10;`data` contains the translated response data if data format is a known format like json&#13;&#10;or it contains the binary response body from server, which is same as `msg.data`
				</parameter>
				<parameter name="option">mostly nil. "-I" for headers only
				</parameter>
				<returns>return return nil if callbackFunc is a function. or (rcode, msg, data) in sync call. 
				</returns>
			</function>
			<function line="256" name="SendEmail" src="script/ide/System/os/GetUrl.lua">
				<summary>function os.SendEmail(params, callbackFunc)&#13;&#10;send an email message via smtp protocol&#13;&#10;&lt;verbatim&gt;&#13;&#10; &#32; @param params: {&#13;&#10;	url="smtp://mail.paraengine.com", &#13;&#10;	username="LiXizhi", password="1234567", &#13;&#10;	-- ca_info = "/path/to/certificate.pem", date = "Mon, 29 Nov 2010 21:54:29 +1100",&#13;&#10;	addresser="xizhi",from="lixizhi&#13;&#10; &#32; @paraengine.com", to="lixizhi&#13;&#10; &#32; @yeah.net", cc="xizhi.li&#13;&#10; &#32; @gmail.com", &#13;&#10;	subject = "title here",&#13;&#10;	body = "any body context here. can be very long",&#13;&#10;}&lt;/verbatim&gt;
				</summary>
				<parameter name="params">{&#13;&#10;	url="smtp://mail.paraengine.com", &#13;&#10;	username="LiXizhi", password="1234567", &#13;&#10;	-- ca_info = "/path/to/certificate.pem", date = "Mon, 29 Nov 2010 21:54:29 +1100",&#13;&#10;	addresser="xizhi",from="lixizhi
				</parameter>
				<parameter name="callbackFunc"/>
			</function>
		</table>
		<table name="ParaScene" src="script/ide/ParaEngineExtension.lua">
			<function line="19" name="GetCharacter">
				<summary>function ParaScene.GetCharacter(charName)&#13;&#10;it first searches the global object, if not found, it will search the OPC list.&#13;&#10;always check if the object is valid() upon receive.
				</summary>
				<parameter name="charName"/>
			</function>
			<function line="43" name="GetSceneState">
				<summary>function ParaScene.GetSceneState()&#13;&#10;return the cached scene state attribute 
				</summary>
			</function>
			<function line="64" name="GetAttributeObject">
				<summary>function ParaScene.GetAttributeObject(name)&#13;&#10;optimize C++ API function by caching the table
				</summary>
				<parameter name="name"/>
			</function>
			<function line="94" name="CaptureSceneState">
				<summary>function ParaScene.CaptureSceneState(options)&#13;&#10;capture the current scene state to be restored later on. &#13;&#10;e.g. &#13;&#10;local state = ParaScene.CaptureSceneState()&#13;&#10;-- change scene state and render ...&#13;&#10;ParaScene.RestoreSceneState(state);&#13;&#10;&#13;&#10;options: a table or nil. if nil, it will capture everything.&#13;&#10; &#32; @return: return the captured scene state 
				</summary>
				<parameter name="options"/>
				<returns>return return the captured scene state 
				</returns>
			</function>
			<function line="126" name="RestoreSceneState">
				<summary>function ParaScene.RestoreSceneState(state)&#13;&#10;restore scene state
				</summary>
				<parameter name="state"/>
			</function>
		</table>
		<table name="ParaCamera" src="script/ide/ParaEngineExtension.lua">
			<function line="53" name="GetAttributeObject">
				<summary>function ParaCamera.GetAttributeObject()&#13;&#10;optimize C++ API function by caching the table
				</summary>
			</function>
			<function line="181" name="SetLookAtPos">
				<summary>function ParaCamera.SetLookAtPos(x, y, z)&#13;&#10;set the look at position of the camera. It uses an invisible avatar as the camera look at position. &#13;&#10;after calling this function, please call ParaCamera.SetEyePos(facing, height, angle) to change the camera eye position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="188" name="GetLookAtPos">
				<summary>function ParaCamera.GetLookAtPos()&#13;&#10;
				</summary>
			</function>
			<function line="194" name="GetEyePos">
				<summary>function ParaCamera.GetEyePos()&#13;&#10;it returns polar coordinate system.&#13;&#10; &#32; @return camobjDist, LiftupAngle, CameraRotY
				</summary>
				<returns>return , LiftupAngle, CameraRotY
				</returns>
			</function>
			<function line="200" name="GetDummyObject">
				<summary>function ParaCamera.GetDummyObject()&#13;&#10;create/get the dummy camera object for the camera look position. 
				</summary>
			</function>
			<function line="220" name="SetEyePos">
				<summary>function ParaCamera.SetEyePos(camobjDist, LiftupAngle, CameraRotY)&#13;&#10;set the camera eye position by camera object distance, life up angle and rotation around the y axis. One must call ParaCamera.SetLookAtPos() before calling this function. &#13;&#10;e.g.ParaCamera.SetEyePos(5, 1.3, 0.4);
				</summary>
				<parameter name="camobjDist"/>
				<parameter name="LiftupAngle"/>
				<parameter name="CameraRotY"/>
			</function>
			<function line="230" name="SwitchOrthoView">
				<summary>function ParaCamera.SwitchOrthoView(orthoWidth, orthoHeight)&#13;&#10;switch to orthographic camera view, where the near and far objects are of the same size.&#13;&#10; &#32; @param orthoWidth: the width of the orthographic view volumn.&#13;&#10; &#32; @param orthoHeight: the height of the orthographic view volumn.
				</summary>
				<parameter name="orthoWidth">the width of the orthographic view volumn.
				</parameter>
				<parameter name="orthoHeight">the height of the orthographic view volumn.
				</parameter>
			</function>
			<function line="251" name="SwitchPerspectiveView">
				<summary>function ParaCamera.SwitchPerspectiveView()&#13;&#10;switch to perspective view
				</summary>
			</function>
		</table>
		<table name="ParaEngine" src="script/ide/ParaEngineExtension.lua">
			<function line="78" name="GetAttributeObject">
				<summary>function ParaEngine.GetAttributeObject()&#13;&#10;optimize C++ API function by caching the table
				</summary>
			</function>
		</table>
		<table name="ParaAsset" src="script/ide/ParaEngineExtension.lua">
			<function line="263" name="GetRemoteTexture">
				<summary>function ParaAsset.GetRemoteTexture(url, cache_policy, callback, expiredCallback)&#13;&#10;It is called automatically when the ParaEngine Core detects that a texture is a remote texture. &#13;&#10;An internal ResourceStore (local server) called "_default_" is used to serve http textures. &#13;&#10;An internal time is also used so that we can sequence downloader threads.&#13;&#10; &#32; @param cache_policy: please note for http object, cache-control: max-age is always added to the cache_policy&#13;&#10;by default cache_policy is 1 hour plus cache-control max-age. 
				</summary>
				<parameter name="url"/>
				<parameter name="cache_policy">please note for http object, cache-control: max-age is always added to the cache_policy&#13;&#10;by default cache_policy is 1 hour plus cache-control max-age. 
				</parameter>
				<parameter name="callback"/>
				<parameter name="expiredCallback"/>
			</function>
			<function line="277" name="GetRemoteTexture_callback">
				<summary>function ParaAsset.GetRemoteTexture_callback(entry)&#13;&#10;
				</summary>
				<parameter name="entry"/>
			</function>
			<function line="287" name="ClearTextureCache">
				<summary>function ParaAsset.ClearTextureCache()&#13;&#10;clear all cached textures. 
				</summary>
			</function>
			<function line="305" name="SyncRemoteTexture">
				<summary>function ParaAsset.SyncRemoteTexture(FileUrl)&#13;&#10;&#13;&#10;This function is OBSOLETED. now NPLRuntime uses ParaAsset.GetRemoteTexture instead. &#13;&#10;It is called automatically when the ParaEngine Core detects that a texture is a remote texture.&#13;&#10; &#32; @note: One shall never call this function explicitly. In scripting interface, we can call ParaAsset.LoadRemoteTexture() instead&#13;&#10;Load a texture from remote file. It first checks if the file is available from the local texture cache,&#13;&#10;if yes, it will immediately use the local copy, before refreshing from the network. In either case, a thread is &#13;&#10;used to synchronize with the remote server. The only exception is that the filename contains a CRC32 parameter, &#13;&#10;where the remote sync is skipped if CRC match.
				</summary>
				<parameter name="FileUrl"/>
			</function>
			<function line="319" name="SyncRemoteTexture_callback">
				<summary>function ParaAsset.SyncRemoteTexture_callback(FileUrl, DestFolder)&#13;&#10;This function is OBSOLETED. 
				</summary>
				<parameter name="FileUrl"/>
				<parameter name="DestFolder"/>
			</function>
			<function line="335" name="LoadRemoteTexture">
				<summary>function ParaAsset.LoadRemoteTexture(filename, loadingtexture)&#13;&#10;Load a remote texture explicitly. This function differs from the original ParaAsset.LoadTexture() that&#13;&#10;it allows you to specify a loadingtexture to display while the texture is being downloaded.&#13;&#10; &#32; @param filename: http texture&#13;&#10;	note3: crc32 code can be appended to file name, so that the same file does not need to be downloaded multiple times if local and server version match. such as "http://www.paraengine.com/images/index_12.png?CRC32=0".&#13;&#10; &#32; @param loadingtexture: while filename is being downloaded, this texture will be used.&#13;&#10; &#32; @return: texture is returned.
				</summary>
				<parameter name="filename">http texture&#13;&#10;	note3: crc32 code can be appended to file name, so that the same file does not need to be downloaded multiple times if local and server version match. such as "http://www.paraengine.com/images/index_12.png?CRC32=0".
				</parameter>
				<parameter name="loadingtexture">while filename is being downloaded, this texture will be used.
				</parameter>
				<returns>return texture is returned.
				</returns>
			</function>
		</table>
		<table name="Request" src="script/ide/System/os/GetUrl.lua">
			<function line="109" name="init">
				<summary>function Request:init(options, callbackFunc)&#13;&#10;
				</summary>
				<parameter name="options"/>
				<parameter name="callbackFunc"/>
			</function>
			<function line="130" name="SetHeader">
				<summary>function Request:SetHeader(key, value)&#13;&#10;&#13;&#10; &#32; @param value: if nil, key is added as a headerline.
				</summary>
				<parameter name="key"/>
				<parameter name="value">if nil, key is added as a headerline.
				</parameter>
			</function>
			<function line="143" name="SetResponse">
				<summary>function Request:SetResponse(msg)&#13;&#10;
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="165" name="InvokeCallback">
				<summary>function Request:InvokeCallback()&#13;&#10;
				</summary>
			</function>
		</table>
		<table name="CmdParser" src="script/ide/System/Util/CmdParser.lua">
			<function line="33" name="ParseInt">
				<summary>function CmdParser.ParseInt(cmd_text)&#13;&#10;return integer or float, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="48" name="ParseDeltaInt">
				<summary>function CmdParser.ParseDeltaInt(cmd_text)&#13;&#10;e.g. "~0.1"&#13;&#10;return integer or float, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="61" name="ParseText">
				<summary>function CmdParser.ParseText(cmd_text, text)&#13;&#10;parse a given text&#13;&#10; &#32; @param text:such as "home", must not contain regular expression letters. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="text">such as "home", must not contain regular expression letters. 
				</parameter>
			</function>
			<function line="70" name="ParseString">
				<summary>function CmdParser.ParseString(cmd_text)&#13;&#10;parse any string value without white space. 
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="79" name="ParseFilename">
				<summary>function CmdParser.ParseFilename(cmd_text)&#13;&#10;it could be string without spaces, or it could be "file name with space"
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="93" name="ParseWord">
				<summary>function CmdParser.ParseWord(cmd_text)&#13;&#10;parse any word value without white space. 
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="102" name="ParseFormated">
				<summary>function CmdParser.ParseFormated(cmd_text, strFmt)&#13;&#10;&#13;&#10; &#32; @param strFmt: regular expression such as "%S+", "%w+", etc. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="strFmt">regular expression such as "%S+", "%w+", etc. 
				</parameter>
			</function>
			<function line="113" name="ParseOption">
				<summary>function CmdParser.ParseOption(cmd_text, bTextOnly)&#13;&#10;&#13;&#10; &#32; @param bTextOnly: default to fales. if true, option can only start with non-number&#13;&#10;parse option that begins with -, return the option name
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="bTextOnly">default to fales. if true, option can only start with non-number&#13;&#10;parse option that begins with -, return the option name
				</parameter>
			</function>
			<function line="128" name="ParseOptions">
				<summary>function CmdParser.ParseOptions(cmd_text, bTextOnly)&#13;&#10;&#13;&#10; &#32; @param bTextOnly: default to fales. if true, option can only start with non-number&#13;&#10;return options: {}
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="bTextOnly">default to fales. if true, option can only start with non-number&#13;&#10;return options: {}
				</parameter>
			</function>
			<function line="151" name="ParseOptionsNameValue">
				<summary>function CmdParser.ParseOptionsNameValue(cmd_text)&#13;&#10;parse options in name value pairs like "-name=value -name2=value2"
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="173" name="ParseBool">
				<summary>function CmdParser.ParseBool(cmd_text)&#13;&#10;1|0 on|off true|false are all supported
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="185" name="ParseNumberList">
				<summary>function CmdParser.ParseNumberList(cmd_text, list, separator)&#13;&#10;&#13;&#10; &#32; @param cmd_text: "1|2|3" will return {1,2,3}&#13;&#10;"1|~|3" will return {1,false,3}&#13;&#10; &#32; @param separator: default to "|," which is "|" or ",". one can also specify "|,%s"&#13;&#10;return a table array of numbers
				</summary>
				<parameter name="cmd_text">"1|2|3" will return {1,2,3}&#13;&#10;"1|~|3" will return {1,false,3}
				</parameter>
				<parameter name="list"/>
				<parameter name="separator">default to "|," which is "|" or ",". one can also specify "|,%s"&#13;&#10;return a table array of numbers
				</parameter>
			</function>
			<function line="222" name="ParseStringList">
				<summary>function CmdParser.ParseStringList(cmd_text, list)&#13;&#10;&#13;&#10; &#32; @param cmd_text: "str1|2|str3" will return {"str1","2","str3"}&#13;&#10;return a table of |or, sperated list
				</summary>
				<parameter name="cmd_text">"str1|2|str3" will return {"str1","2","str3"}&#13;&#10;return a table of |or, sperated list
				</parameter>
				<parameter name="list"/>
			</function>
			<function line="245" name="ParseServerData">
				<summary>function CmdParser.ParseServerData(cmd_text)&#13;&#10;item's serverdata or tagData in xml format&#13;&#10;currently, this must be the last parameter.&#13;&#10; &#32; @param cmd_text: "{table parameters}"&#13;&#10; &#32; @return serverDataTable, cmd_remaining_text
				</summary>
				<parameter name="cmd_text">"{table parameters}"
				</parameter>
				<returns>return , cmd_remaining_text
				</returns>
			</function>
			<function line="258" name="ParseColor">
				<summary>function CmdParser.ParseColor(cmd_text, default_value)&#13;&#10;parse: #rgb like "#ffffff"&#13;&#10; &#32; @return the string "#ffffff"
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="default_value"/>
				<returns>return string "#ffffff"
				</returns>
			</function>
			<function line="268" name="ParseTable">
				<summary>function CmdParser.ParseTable(cmd_text, default_value)&#13;&#10;parse: NPL table string {attr={filename=""}}&#13;&#10; &#32; @return table, remaining_text;
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="default_value"/>
				<returns>return , remaining_text;
				</returns>
			</function>
		</table>
		<table name="Event" src="script/ide/System/Core/Event.lua">
			<function line="29" name="ctor">
				<summary>function Event:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="32" name="init">
				<summary>function Event:init(event_type)&#13;&#10;
				</summary>
				<parameter name="event_type"/>
			</function>
			<function line="41" name="new_static">
				<summary>function Event:new_static(event_type)&#13;&#10;get a singleton event by its types&#13;&#10;event will be set to unaccepeted. 
				</summary>
				<parameter name="event_type"/>
			</function>
			<function line="60" name="use_static_new">
				<summary>function Event:use_static_new()&#13;&#10;static function: after calling this, Event:new() will no longer create new object, but return the singleton class object instead. &#13;&#10;this is useful, if you send event without paramaters and without nested calls that depends on self:accept(). 
				</summary>
			</function>
			<function line="65" name="GetType">
				<summary>function Event:GetType() &#13;&#10;return event name (type)
				</summary>
			</function>
			<function line="69" name="GetHandlerFuncName">
				<summary>function Event:GetHandlerFuncName()&#13;&#10;
				</summary>
			</function>
			<function line="73" name="accept">
				<summary>function Event:accept()&#13;&#10;
				</summary>
			</function>
			<function line="77" name="ignore">
				<summary>function Event:ignore()&#13;&#10;
				</summary>
			</function>
			<function line="83" name="setAccepted">
				<summary>function Event:setAccepted(accepted) &#13;&#10;
				</summary>
				<parameter name="accepted"/>
			</function>
			<function line="87" name="isAccepted">
				<summary>function Event:isAccepted() &#13;&#10;
				</summary>
			</function>
			<function line="92" name="spontaneous">
				<summary>function Event:spontaneous() &#13;&#10;whether it is sent spontneously instead of posted. 
				</summary>
			</function>
			<function line="97" name="OnTick">
				<summary>function Event:OnTick(deltaTime)&#13;&#10;return true if event should be removed. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="101" name="tostring">
				<summary>function Event:tostring()&#13;&#10;
				</summary>
			</function>
		</table>
		<table name="EventTickFunc" src="script/ide/System/Core/Event.lua">
			<function line="112" name="ctor">
				<summary>function EventTickFunc:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="119" name="init">
				<summary>function EventTickFunc:init(ms_delay_time, sender, slot)&#13;&#10;&#13;&#10; &#32; @param ms_delay_time: in ms seconds.&#13;&#10; &#32; @param sender: nil or a class object.&#13;&#10; &#32; @param slot: the slot function. 
				</summary>
				<parameter name="ms_delay_time">in ms seconds.
				</parameter>
				<parameter name="sender">nil or a class object.
				</parameter>
				<parameter name="slot">the slot function. 
				</parameter>
			</function>
			<function line="126" name="OnTick">
				<summary>function EventTickFunc:OnTick(deltaTime)&#13;&#10;
				</summary>
				<parameter name="deltaTime"/>
			</function>
		</table>
		<table name="TimerEvent" src="script/ide/System/Core/Event.lua">
			<function line="142" name="ctor">
				<summary>function TimerEvent:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="146" name="init">
				<summary>function TimerEvent:init(timerId)&#13;&#10;
				</summary>
				<parameter name="timerId"/>
			</function>
			<function line="150" name="timerId">
				<summary>function TimerEvent:timerId() &#13;&#10;
				</summary>
			</function>
		</table>
		<table name="ToolBase" src="script/ide/System/Core/ToolBase.lua">
			<function line="69" name="Destroy">
				<summary>function ToolBase:Destroy()&#13;&#10;
				</summary>
			</function>
			<function line="101" name="isAncestorOf">
				<summary>function ToolBase:isAncestorOf(child)&#13;&#10;Returns true if this object is a parent, (or grandparent and so on&#13;&#10;to any level), of the given child; otherwise returns false.
				</summary>
				<parameter name="child"/>
			</function>
			<function line="113" name="GetParent">
				<summary>function ToolBase:GetParent(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="129" name="InitSingleton">
				<summary>function ToolBase:InitSingleton()&#13;&#10;static function: to use the class itself as a singleton object. &#13;&#10;this function can be called many times, only the first time succeed. &#13;&#10;Once called, it will disable new() method for object instantiation. &#32;
				</summary>
			</function>
			<function line="140" name="GetEvents">
				<summary>function ToolBase:GetEvents()&#13;&#10;get event system. 
				</summary>
			</function>
			<function line="152" name="ChangeTimer">
				<summary>function ToolBase:ChangeTimer(dueTime, period)&#13;&#10;change the timer&#13;&#10; &#32; @param dueTime The amount of time to delay before the invoking the callback method specified in milliseconds&#13;&#10;Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.&#13;&#10; &#32; @param period The time interval between invocations of the callback method in milliseconds. &#13;&#10;Specify nil to disable periodic signaling. 
				</summary>
				<parameter name="dueTime">The amount of time to delay before the invoking the callback method specified in milliseconds&#13;&#10;Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.
				</parameter>
				<parameter name="period">The time interval between invocations of the callback method in milliseconds. &#13;&#10;Specify nil to disable periodic signaling. 
				</parameter>
			</function>
			<function line="159" name="KillTimer">
				<summary>function ToolBase:KillTimer()&#13;&#10;
				</summary>
			</function>
			<function line="166" name="GetEventList">
				<summary>function ToolBase:GetEventList()&#13;&#10;get event list. 
				</summary>
			</function>
			<function line="178" name="ScheduleFunctionCall">
				<summary>function ToolBase:ScheduleFunctionCall(ms_delay_time, sender, slot)&#13;&#10;&#13;&#10; &#32; @param ms_delay_time: in ms seconds.&#13;&#10; &#32; @param sender: nil or a class object or anonymous function.&#13;&#10; &#32; @param slot: the slot function. if nil, the sender can be an anonymous function. 
				</summary>
				<parameter name="ms_delay_time">in ms seconds.
				</parameter>
				<parameter name="sender">nil or a class object or anonymous function.
				</parameter>
				<parameter name="slot">the slot function. if nil, the sender can be an anonymous function. 
				</parameter>
			</function>
			<function line="196" name="OnTickEvents">
				<summary>function ToolBase:OnTickEvents(deltaTime_ms)&#13;&#10;private function:
				</summary>
				<parameter name="deltaTime_ms"/>
			</function>
			<function line="214" name="OnTick">
				<summary>function ToolBase:OnTick()&#13;&#10;timer function callback:
				</summary>
			</function>
			<function line="223" name="GetConnection">
				<summary>function ToolBase:GetConnection(signal, bCreateIfNotExist)&#13;&#10;getting connection list of a signal function. &#13;&#10;this is like axon in human brain.&#13;&#10; &#32; @param signal: function or string of function name.&#13;&#10; &#32; @param bCreateIfNotExist: default to nil.&#13;&#10; &#32; @return a list of synapses on the signal(axon).
				</summary>
				<parameter name="signal">function or string of function name.
				</parameter>
				<parameter name="bCreateIfNotExist">default to nil.
				</parameter>
				<returns>return list of synapses on the signal(axon).
				</returns>
			</function>
			<function line="258" name="Connect">
				<summary>function ToolBase.Connect(sender, signal, receiver, slot, connection_type)&#13;&#10;static function: make automatic connection. If the sender is self pointer, it can be used as member function.&#13;&#10; &#32; @param connection_type: such as "UniqueConnection", if nil, default to "AutoConnection"&#13;&#10; &#32; @param sender: the sender class object.&#13;&#10; &#32; @param signal: a member function (or name) on the sender.&#13;&#10; &#32; @param receiver:the receiver class object. it can also be anonymous function in which case this should be the last parameter.&#13;&#10; &#32; @param slot: a member function (or name) on the receiver to connect to. 
				</summary>
				<parameter name="sender">the sender class object.
				</parameter>
				<parameter name="signal">a member function (or name) on the sender.
				</parameter>
				<parameter name="receiver">the receiver class object. it can also be anonymous function in which case this should be the last parameter.
				</parameter>
				<parameter name="slot">a member function (or name) on the receiver to connect to. 
				</parameter>
				<parameter name="connection_type">such as "UniqueConnection", if nil, default to "AutoConnection"
				</parameter>
			</function>
			<function line="279" name="ConnectImp">
				<summary>function ToolBase.ConnectImp(sender, signal, receiver, slot, connection_type)&#13;&#10;implementation without parameter validation. 
				</summary>
				<parameter name="sender"/>
				<parameter name="signal"/>
				<parameter name="receiver"/>
				<parameter name="slot"/>
				<parameter name="connection_type"/>
			</function>
			<function line="315" name="DisconnectHelper">
				<summary>function ToolBase:DisconnectHelper(connection, receiver, slot, disconnectType)&#13;&#10;remove synapse from connection. 
				</summary>
				<parameter name="connection"/>
				<parameter name="receiver"/>
				<parameter name="slot"/>
				<parameter name="disconnectType"/>
			</function>
			<function line="337" name="Disconnect">
				<summary>function ToolBase.Disconnect(sender, signal, receiver, slot, disconnectType)&#13;&#10;&#13;&#10; &#32; @param signal: if nil, it will remove all signal connections.&#13;&#10; &#32; @param disconnectType: "DisconnectOne" or "DisconnectAll", default to all. 
				</summary>
				<parameter name="sender"/>
				<parameter name="signal">if nil, it will remove all signal connections.
				</parameter>
				<parameter name="receiver"/>
				<parameter name="slot"/>
				<parameter name="disconnectType">"DisconnectOne" or "DisconnectAll", default to all. 
				</parameter>
			</function>
			<function line="371" name="DisconnectSenders">
				<summary>function ToolBase:DisconnectSenders()&#13;&#10;disconnect from all senders&#13;&#10;this function is mostly used in destructor to automatically break incoming connections.
				</summary>
			</function>
			<function line="388" name="DisconnectSender">
				<summary>function ToolBase:DisconnectSender(srcSender)&#13;&#10;disconnect all connections from a given sender
				</summary>
				<parameter name="srcSender"/>
			</function>
			<function line="414" name="sender">
				<summary>function ToolBase:sender()&#13;&#10;Returns a pointer to the object that sent the signal, if called in&#13;&#10;a slot activated by a signal; otherwise it returns 0. The pointer&#13;&#10;is valid only during the execution of the slot that calls this&#13;&#10;function from this object's thread context.&#13;&#10;&#13;&#10;The pointer returned by this function becomes invalid if the&#13;&#10;sender is destroyed, or if the slot is disconnected from the&#13;&#10;sender's signal.&#13;&#10; &#32; @warning This function violates the object-oriented principle of&#13;&#10;modularity. However, getting access to the sender might be useful&#13;&#10;when many signals are connected to a single slot.
				</summary>
			</function>
			<function line="423" name="Activate">
				<summary>function ToolBase.Activate(sender, signal, ...)&#13;&#10;static or member function: activate a given signal, all connected slots will be called.&#13;&#10; &#32; @param sender: usually self. if used as a member function. 
				</summary>
				<parameter name="sender">usually self. if used as a member function. 
				</parameter>
				<parameter name="signal"/>
			</function>
			<function line="445" name="ConnectNotify">
				<summary>function ToolBase:ConnectNotify(signal)&#13;&#10;This virtual function is called when something has been connected&#13;&#10;to a signal in this object. &#13;&#10;warning This function violates the object-oriented principle of&#13;&#10;modularity. However, it might be useful for optimizing access to expensive resources.
				</summary>
				<parameter name="signal"/>
			</function>
			<function line="451" name="DisconnectNotify">
				<summary>function ToolBase:DisconnectNotify(signal)&#13;&#10;This virtual function is called when something has been disconnected from a signal in this object.&#13;&#10;warning This function violates the object-oriented principle of&#13;&#10;modularity. However, it might be useful for optimizing access to expensive resources.
				</summary>
				<parameter name="signal"/>
			</function>
			<function line="454" name="GetChildren">
				<summary>function ToolBase:GetChildren()&#13;&#10;
				</summary>
			</function>
			<function line="461" name="SetParent">
				<summary>function ToolBase:SetParent(parent)&#13;&#10;
				</summary>
				<parameter name="parent"/>
			</function>
			<function line="465" name="setParent_helper">
				<summary>function ToolBase:setParent_helper(parent)&#13;&#10;
				</summary>
				<parameter name="parent"/>
			</function>
			<function line="484" name="deleteChildren">
				<summary>function ToolBase:deleteChildren()&#13;&#10;
				</summary>
			</function>
			<function line="528" name="dumpObjectInfo">
				<summary>function ToolBase:dumpObjectInfo()&#13;&#10;Dumps information about signal connections, etc. for this object to the log.
				</summary>
			</function>
			<function line="574" name="installEventFilter">
				<summary>function ToolBase:installEventFilter(obj)&#13;&#10;Installs an event filter obj on this object. filter is like the hook chain&#13;&#10;An event filter is an object that receives all events that are&#13;&#10;sent to this object. The filter can either stop the event or&#13;&#10;forward it to this object. The event filter obj receives&#13;&#10;events via its eventFilter() function. The eventFilter() function&#13;&#10;must return true if the event should be filtered, (i.e. stopped);&#13;&#10;otherwise it must return false.&#13;&#10;If multiple event filters are installed on a single object, the&#13;&#10;filter that was installed last is activated first.
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="592" name="removeEventFilter">
				<summary>function ToolBase:removeEventFilter(obj)&#13;&#10;Removes an event filter object obj from this object. The&#13;&#10;request is ignored if such an event filter has not been installed.&#13;&#10;All event filters for this object are automatically removed when&#13;&#10;this object is destroyed.&#13;&#10;It is always safe to remove an event filter, even during event&#13;&#10;filter activation (i.e. from the eventFilter() function).
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="611" name="filterEvent">
				<summary>function ToolBase:filterEvent(object, event)&#13;&#10;filter the event&#13;&#10; &#32; @return true if event is stopped by one of the filtered objects. 
				</summary>
				<parameter name="object"/>
				<parameter name="event"/>
				<returns>return if event is stopped by one of the filtered objects. 
				</returns>
			</function>
			<function line="632" name="eventFilter">
				<summary>function ToolBase:eventFilter(object, event)&#13;&#10;virtual function: &#13;&#10;Filters events if this object has been installed as an event&#13;&#10;filter for the watched object.&#13;&#10;In your reimplementation of this function, if you want to filter&#13;&#10;the event out, i.e. stop it being handled further, return&#13;&#10;true; otherwise return false.&#13;&#10; &#32; @sa installEventFilter()
				</summary>
				<parameter name="object"/>
				<parameter name="event"/>
			</function>
			<function line="224" name="Property" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase.Property(class_def, name, default_value, getterName, setterName, notifySignal)&#13;&#10;define a property with overridable get/set function. &#13;&#10;e.g. &#32;YourClass:Property(property_name, ...);&#13;&#10; &#32; @param class_def: the class table (not instance).&#13;&#10; &#32; @param name: First letter is usually in capital. &#32;(it can also be property table. )&#13;&#10;such as &#32;{name="visible", set="setVisible", get="isVisible", default=nil, sig=nil, type="bool", desc=nil, }&#13;&#10;{"visible", false, "isVisible", "setVisible"}&#13;&#10;{"Enabled", false, auto=true}&#13;&#10; &#32; @param getterName: if nil, default to "Get"..name.&#13;&#10; &#32; @param setterName: if nil, default to "Set"..name.&#13;&#10; &#32; @param notifySignal: the signal to fire when property changed. default to nil. 
				</summary>
				<parameter name="class_def">the class table (not instance).
				</parameter>
				<parameter name="name">First letter is usually in capital. &#32;(it can also be property table. )&#13;&#10;such as &#32;{name="visible", set="setVisible", get="isVisible", default=nil, sig=nil, type="bool", desc=nil, }&#13;&#10;{"visible", false, "isVisible", "setVisible"}&#13;&#10;{"Enabled", false, auto=true}
				</parameter>
				<parameter name="default_value"/>
				<parameter name="getterName">if nil, default to "Get"..name.
				</parameter>
				<parameter name="setterName">if nil, default to "Set"..name.
				</parameter>
				<parameter name="notifySignal">the signal to fire when property changed. default to nil. 
				</parameter>
			</function>
			<function line="264" name="Signal" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase.Signal(class_def, name)&#13;&#10;define a signal&#13;&#10;e.g. YourClass:Signal("OnXXXChanged", ...);&#13;&#10; &#32; @param ...: parameter list is only used for documentation purpose. 
				</summary>
				<parameter name="class_def"/>
				<parameter name="name"/>
			</function>
			<function line="278" name="AddField" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase.AddField(class_def, name, property)&#13;&#10;
				</summary>
				<parameter name="class_def"/>
				<parameter name="name"/>
				<parameter name="property"/>
			</function>
			<function line="341" name="IsValid" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:IsValid()&#13;&#10;
				</summary>
			</function>
			<function line="347" name="findPlug" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:findPlug(name)&#13;&#10;find and return a given attribute plug object. &#13;&#10;this is a public helper function. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="351" name="GetFieldNum" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldNum()&#13;&#10;
				</summary>
			</function>
			<function line="355" name="GetFieldIndex" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldIndex(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="359" name="GetFieldName" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldName(valueIndex)&#13;&#10;
				</summary>
				<parameter name="valueIndex"/>
			</function>
			<function line="366" name="GetFieldType" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldType(nIndex)&#13;&#10;
				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="375" name="SetFieldInternal" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:SetFieldInternal(name, value)&#13;&#10;same as SetField, except that some implementation may not send signals like valueChanged even data is modified. &#13;&#10;it will automatically fallback to SetField if not such implementation is provided by the attribute object. &#32;
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="379" name="SetField" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:SetField(name, value)&#13;&#10;
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="393" name="GetField" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetField(name, defaultValue)&#13;&#10;
				</summary>
				<parameter name="name"/>
				<parameter name="defaultValue"/>
			</function>
			<function line="413" name="GetAttributeObject" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetAttributeObject()&#13;&#10;
				</summary>
			</function>
		</table>
		<table name="SignalConnections" src="script/ide/System/Core/ToolBase_p.lua">
			<function line="21" name="ctor">
				<summary>function SignalConnections:ctor()&#13;&#10;&#13;&#10;Title: private classes &#13;&#10;Author(s): LiXizhi&#13;&#10;Date: 2014/11/25&#13;&#10;Desc: This function should only be included by ToolBase.lua&#13;&#10;use the lib:&#13;&#10;------------------------------------------------------------&#13;&#10;NPL.load("(gl)script/ide/System/Core/ToolBase_p.lua");&#13;&#10;local ConnectionSynapse = commonlib.gettable("System.Core.ConnectionSynapse");&#13;&#10;local SignalConnections = commonlib.gettable("System.Core.SignalConnections");&#13;&#10;------------------------------------------------------------&#13;&#10;----------------------------------------------&#13;&#10;signal connections.&#13;&#10;----------------------------------------------
				</summary>
			</function>
			<function line="25" name="Get">
				<summary>function SignalConnections:Get(signal)&#13;&#10;
				</summary>
				<parameter name="signal"/>
			</function>
			<function line="29" name="Set">
				<summary>function SignalConnections:Set(signal, axon_connection)&#13;&#10;
				</summary>
				<parameter name="signal"/>
				<parameter name="axon_connection"/>
			</function>
			<function line="33" name="pairs">
				<summary>function SignalConnections:pairs()&#13;&#10;
				</summary>
			</function>
			<function line="37" name="CleanConnectionLists">
				<summary>function SignalConnections:CleanConnectionLists()&#13;&#10;
				</summary>
			</function>
		</table>
		<table name="ConnectionSynapse" src="script/ide/System/Core/ToolBase_p.lua">
			<function line="55" name="ctor">
				<summary>function ConnectionSynapse:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="58" name="IsConnectedTo">
				<summary>function ConnectionSynapse:IsConnectedTo(receiver, slot)&#13;&#10;
				</summary>
				<parameter name="receiver"/>
				<parameter name="slot"/>
			</function>
			<function line="63" name="Activate">
				<summary>function ConnectionSynapse:Activate(...)&#13;&#10;invoke the slot
				</summary>
			</function>
		</table>
		<table name="painter" src="script/ide/System/Core/PainterContext.lua">
			<function line="52" name="ctor">
				<summary>function painter:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="56" name="rect">
				<summary>function painter:rect()&#13;&#10;TODO:
				</summary>
			</function>
			<function line="61" name="region">
				<summary>function painter:region()&#13;&#10;TODO:
				</summary>
			</function>
			<function line="65" name="init">
				<summary>function painter:init(parentWindow)&#13;&#10;
				</summary>
				<parameter name="parentWindow"/>
			</function>
			<function line="70" name="GetWindow">
				<summary>function painter:GetWindow()&#13;&#10;
				</summary>
			</function>
			<function line="74" name="Begin">
				<summary>function painter:Begin(paintDevice)&#13;&#10;
				</summary>
				<parameter name="paintDevice"/>
			</function>
			<function line="78" name="End">
				<summary>function painter:End()&#13;&#10;
				</summary>
			</function>
			<function line="82" name="Flush">
				<summary>function painter:Flush()&#13;&#10;
				</summary>
			</function>
			<function line="86" name="Save">
				<summary>function painter:Save()&#13;&#10;
				</summary>
			</function>
			<function line="90" name="Restore">
				<summary>function painter:Restore()&#13;&#10;
				</summary>
			</function>
			<function line="97" name="SetCompositionMode">
				<summary>function painter:SetCompositionMode(mode)&#13;&#10;&#13;&#10; &#32; @param mode: number from self.CompositionMode&#13;&#10;self.CompositionMode.SourceBlend = 0&#13;&#10;self.CompositionMode.SourceOver = 1
				</summary>
				<parameter name="mode">number from self.CompositionMode&#13;&#10;self.CompositionMode.SourceBlend = 0&#13;&#10;self.CompositionMode.SourceOver = 1
				</parameter>
			</function>
			<function line="101" name="GetCompositionMode">
				<summary>function painter:GetCompositionMode()&#13;&#10;
				</summary>
			</function>
			<function line="108" name="SetFont">
				<summary>function painter:SetFont(font)&#13;&#10;set current font&#13;&#10; &#32; @param font: {family="System", size=10, bold=true}&#13;&#10;or it can be string "System;14;" or "System;14;bold"
				</summary>
				<parameter name="font">{family="System", size=10, bold=true}&#13;&#10;or it can be string "System;14;" or "System;14;bold"
				</parameter>
			</function>
			<function line="116" name="SetPen">
				<summary>function painter:SetPen(pen)&#13;&#10;set current pen&#13;&#10; &#32; @param pen: { width=1, brush = {color="#00000000", texture="filename or texture asset"}, }&#13;&#10;or it can be {width=1, color="#000000", texture="filename or texture asset"}&#13;&#10;or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</summary>
				<parameter name="pen">{ width=1, brush = {color="#00000000", texture="filename or texture asset"}, }&#13;&#10;or it can be {width=1, color="#000000", texture="filename or texture asset"}&#13;&#10;or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</parameter>
			</function>
			<function line="123" name="SetBrush">
				<summary>function painter:SetBrush(brush)&#13;&#10;set current brush (texture and color)&#13;&#10; &#32; @param brush: { color="#00000000", texture="filename or texture asset"} &#13;&#10;or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</summary>
				<parameter name="brush">{ color="#00000000", texture="filename or texture asset"} &#13;&#10;or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</parameter>
			</function>
			<function line="127" name="SetBrushOrigin">
				<summary>function painter:SetBrushOrigin(x, y)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="133" name="SetBackground">
				<summary>function painter:SetBackground(brush)&#13;&#10;set current background brush&#13;&#10; &#32; @param brush: { color="#00000000", texture="filename or texture asset"}
				</summary>
				<parameter name="brush">{ color="#00000000", texture="filename or texture asset"}
				</parameter>
			</function>
			<function line="138" name="SetOpacity">
				<summary>function painter:SetOpacity(fOpacity)&#13;&#10;between [0,1]
				</summary>
				<parameter name="fOpacity"/>
			</function>
			<function line="142" name="SetClipRegion">
				<summary>function painter:SetClipRegion(x, y, w, h)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="w"/>
				<parameter name="h"/>
			</function>
			<function line="146" name="SetClipping">
				<summary>function painter:SetClipping(enable)&#13;&#10;
				</summary>
				<parameter name="enable"/>
			</function>
			<function line="150" name="HasClipping">
				<summary>function painter:HasClipping()&#13;&#10;
				</summary>
			</function>
			<function line="158" name="SetTransform">
				<summary>function painter:SetTransform(trans, combine)&#13;&#10;Sets the world transformation matrix.&#13;&#10;If combine is true, the specified matrix is combined with the current matrix; otherwise it replaces the current matrix.
				</summary>
				<parameter name="trans"/>
				<parameter name="combine"/>
			</function>
			<function line="162" name="GetTransform">
				<summary>function painter:GetTransform(out)&#13;&#10;
				</summary>
				<parameter name="out"/>
			</function>
			<function line="166" name="Scale">
				<summary>function painter:Scale(sx, sy)&#13;&#10;
				</summary>
				<parameter name="sx"/>
				<parameter name="sy"/>
			</function>
			<function line="170" name="Shear">
				<summary>function painter:Shear(sh, sv)&#13;&#10;
				</summary>
				<parameter name="sh"/>
				<parameter name="sv"/>
			</function>
			<function line="174" name="Rotate">
				<summary>function painter:Rotate(a)&#13;&#10;
				</summary>
				<parameter name="a"/>
			</function>
			<function line="178" name="Translate">
				<summary>function painter:Translate(dx, dy)&#13;&#10;
				</summary>
				<parameter name="dx"/>
				<parameter name="dy"/>
			</function>
			<function line="182" name="DrawPoint">
				<summary>function painter:DrawPoint(x, y)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="186" name="DrawLine">
				<summary>function painter:DrawLine(x1, y1, x2, y2)&#13;&#10;
				</summary>
				<parameter name="x1"/>
				<parameter name="y1"/>
				<parameter name="x2"/>
				<parameter name="y2"/>
			</function>
			<function line="194" name="DrawTriangleList">
				<summary>function painter:DrawTriangleList(triangles, nTriangleCount, nIndexOffset)&#13;&#10;draw triangle List&#13;&#10; &#32; @param triangles: array of triangle vertices {{0,1,0}, {1,0,0}, {0,0,1}, ...},&#13;&#10; &#32; @param nTriangleCount: triangle count, default to #triangleList/ 3&#13;&#10; &#32; @param nIndexOffset: start index offset. default to 0.
				</summary>
				<parameter name="triangles">array of triangle vertices {{0,1,0}, {1,0,0}, {0,0,1}, ...},
				</parameter>
				<parameter name="nTriangleCount">triangle count, default to #triangleList/ 3
				</parameter>
				<parameter name="nIndexOffset">start index offset. default to 0.
				</parameter>
			</function>
			<function line="203" name="DrawLineList">
				<summary>function painter:DrawLineList(lineList, nlineCount, nIndexOffset)&#13;&#10;draw line List&#13;&#10; &#32; @param lineList: array of line vertices {{0,1,0}, {1,0,1}, &#32;...},&#13;&#10; &#32; @param nlineCount: line count, default to #lineList/ 2&#13;&#10; &#32; @param nIndexOffset: start index offset. default to 0.
				</summary>
				<parameter name="lineList">array of line vertices {{0,1,0}, {1,0,1}, &#32;...},
				</parameter>
				<parameter name="nlineCount">line count, default to #lineList/ 2
				</parameter>
				<parameter name="nIndexOffset">start index offset. default to 0.
				</parameter>
			</function>
			<function line="208" name="DrawRect">
				<summary>function painter:DrawRect(left, top, width, height)&#13;&#10;
				</summary>
				<parameter name="left"/>
				<parameter name="top"/>
				<parameter name="width"/>
				<parameter name="height"/>
			</function>
			<function line="216" name="DrawTexture">
				<summary>function painter:DrawTexture(x, y, w, h, pTexture, sx, sy, sw, sh)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="w"/>
				<parameter name="h"/>
				<parameter name="pTexture"/>
				<parameter name="sx"/>
				<parameter name="sy"/>
				<parameter name="sw"/>
				<parameter name="sh"/>
			</function>
			<function line="225" name="DrawText">
				<summary>function painter:DrawText(x, y, w, h, sText, textOption)&#13;&#10;&#13;&#10; &#32; @param w, h: if h is nil, w is the sText
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="w">, h: if h is nil, w is the sText
				</parameter>
				<parameter name="h"/>
				<parameter name="sText"/>
				<parameter name="textOption"/>
			</function>
			<function line="235" name="DrawTextScaled">
				<summary>function painter:DrawTextScaled(x, y, text, scale)&#13;&#10;helper function:&#13;&#10; &#32; @param scale: text scale. if nil or 1, it is same as DrawText()
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="text"/>
				<parameter name="scale">text scale. if nil or 1, it is same as DrawText()
				</parameter>
			</function>
			<function line="275" name="DrawTextScaledEx">
				<summary>function painter:DrawTextScaledEx(x, y, width, height, text, alignment, scale)&#13;&#10;Set the text align and other text displaying formats&#13;&#10; &#32; @param alignment: It can be any combination of the following values.&#13;&#10;DT_BOTTOM (0x00000008)&#13;&#10;Justifies the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.&#13;&#10;DT_CALCRECT (0x00000400)&#13;&#10;Determines the width and height of the rectangle. If there are multiple lines of text, ID3DXFont::DrawText uses the width of the rectangle pointed to by the pRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, ID3DXFont::DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, ID3DXFont::DrawText returns the height of the formatted text but does not draw the text.&#13;&#10;DT_CENTER (0x00000001)&#13;&#10;Centers text horizontally in the rectangle.&#13;&#10;DT_EXPANDTABS (0x00000040)&#13;&#10;Expands tab characters. The default number of characters per tab is eight.&#13;&#10;DT_LEFT (0x00000000)&#13;&#10;Aligns text to the left.&#13;&#10;DT_NOCLIP (0x00000100)&#13;&#10;Draws without clipping. ID3DXFont::DrawText is somewhat faster when DT_NOCLIP is used.&#13;&#10;DT_RIGHT (0x00000002)&#13;&#10;Aligns text to the right.&#13;&#10;DT_RTLREADING&#13;&#10;Displays text in right-to-left reading order for bi-directional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.&#13;&#10;DT_SINGLELINE (0x00000020)&#13;&#10;Displays text on a single line only. Carriage returns and line feeds do not break the line.&#13;&#10;DT_TOP (0x00000000)&#13;&#10;Top-justifies text.&#13;&#10;DT_VCENTER (0x00000004)&#13;&#10;Centers text vertically (single line only).&#13;&#10;DT_WORDBREAK (0x00000010)&#13;&#10;Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the pRect parameter. A carriage return/line feed sequence also breaks the line.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<parameter name="text"/>
				<parameter name="alignment">It can be any combination of the following values.&#13;&#10;DT_BOTTOM (0x00000008)&#13;&#10;Justifies the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.&#13;&#10;DT_CALCRECT (0x00000400)&#13;&#10;Determines the width and height of the rectangle. If there are multiple lines of text, ID3DXFont::DrawText uses the width of the rectangle pointed to by the pRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, ID3DXFont::DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, ID3DXFont::DrawText returns the height of the formatted text but does not draw the text.&#13;&#10;DT_CENTER (0x00000001)&#13;&#10;Centers text horizontally in the rectangle.&#13;&#10;DT_EXPANDTABS (0x00000040)&#13;&#10;Expands tab characters. The default number of characters per tab is eight.&#13;&#10;DT_LEFT (0x00000000)&#13;&#10;Aligns text to the left.&#13;&#10;DT_NOCLIP (0x00000100)&#13;&#10;Draws without clipping. ID3DXFont::DrawText is somewhat faster when DT_NOCLIP is used.&#13;&#10;DT_RIGHT (0x00000002)&#13;&#10;Aligns text to the right.&#13;&#10;DT_RTLREADING&#13;&#10;Displays text in right-to-left reading order for bi-directional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.&#13;&#10;DT_SINGLELINE (0x00000020)&#13;&#10;Displays text on a single line only. Carriage returns and line feeds do not break the line.&#13;&#10;DT_TOP (0x00000000)&#13;&#10;Top-justifies text.&#13;&#10;DT_VCENTER (0x00000004)&#13;&#10;Centers text vertically (single line only).&#13;&#10;DT_WORDBREAK (0x00000010)&#13;&#10;Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the pRect parameter. A carriage return/line feed sequence also breaks the line.
				</parameter>
				<parameter name="scale"/>
			</function>
			<function line="293" name="DrawRectTexture">
				<summary>function painter:DrawRectTexture(x, y, width, height, texture)&#13;&#10;helper function:&#13;&#10; &#32; @param texture: if nil or "" or "Texture/whitedot.png", it will render with current pen color. &#13;&#10;otherwise it can also be single or 9-tiled texture
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<parameter name="texture">if nil or "" or "Texture/whitedot.png", it will render with current pen color. &#13;&#10;otherwise it can also be single or 9-tiled texture
				</parameter>
			</function>
			<function line="304" name="DrawSceneObject">
				<summary>function painter:DrawSceneObject(obj, nOption)&#13;&#10;draw a scene object&#13;&#10; &#32; @param obj: can be a character or model object.&#13;&#10; &#32; @param nOption: default to 0, which renders using the transform of the scene object. 
				</summary>
				<parameter name="obj">can be a character or model object.
				</parameter>
				<parameter name="nOption">default to 0, which renders using the transform of the scene object. 
				</parameter>
			</function>
			<function line="313" name="SetUseWorldMatrix">
				<summary>function painter:SetUseWorldMatrix(bEnable)&#13;&#10;whether we are using the 3d world transform, this is always true for overlay and 3d text.
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="318" name="IsUseWorldMatrix">
				<summary>function painter:IsUseWorldMatrix()&#13;&#10;whether we are using the 3d world transform, this is always true for overlay and 3d text.
				</summary>
			</function>
			<function line="325" name="SetMatrixMode">
				<summary>function painter:SetMatrixMode(nMode)&#13;&#10;similar to glMatrixMode() in opengl. &#13;&#10;one usually needs to call self:LoadCurrentMatrix() immediately after this function.&#13;&#10; &#32; @param nMode: &#32;0 is world, 1 is view, 2 is projection. default to 0. 
				</summary>
				<parameter name="nMode">0 is world, 1 is view, 2 is projection. default to 0. 
				</parameter>
			</function>
			<function line="329" name="GetMatrixMode">
				<summary>function painter:GetMatrixMode()&#13;&#10;
				</summary>
			</function>
			<function line="334" name="PushMatrix">
				<summary>function painter:PushMatrix()&#13;&#10;similar to glPushMatrix() in opengl.
				</summary>
			</function>
			<function line="339" name="PopMatrix">
				<summary>function painter:PopMatrix()&#13;&#10;similar to glPopMatrix() in opengl.
				</summary>
			</function>
			<function line="344" name="LoadCurrentMatrix">
				<summary>function painter:LoadCurrentMatrix()&#13;&#10;retrieve the current matrix. 
				</summary>
			</function>
			<function line="349" name="LoadIdentityMatrix">
				<summary>function painter:LoadIdentityMatrix()&#13;&#10;load identity matrix 
				</summary>
			</function>
			<function line="354" name="LoadBillboardMatrix">
				<summary>function painter:LoadBillboardMatrix()&#13;&#10;load billboard matrix, so that everything rendered (including text) always face the camera.
				</summary>
			</function>
			<function line="360" name="LoadMatrix">
				<summary>function painter:LoadMatrix(mat)&#13;&#10;we use row-major matrix&#13;&#10; &#32; @param mat: both 4*3 or 4*4 matrix are fine
				</summary>
				<parameter name="mat">both 4*3 or 4*4 matrix are fine
				</parameter>
			</function>
			<function line="365" name="MultiplyMatrix">
				<summary>function painter:MultiplyMatrix(mat)&#13;&#10;multiply the current matrix with the specified matrix. we use row-major matrix 
				</summary>
				<parameter name="mat"/>
			</function>
			<function line="371" name="TranslateMatrix">
				<summary>function painter:TranslateMatrix(x, y, z)&#13;&#10;multiply the current matrix by a translation matrix 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="378" name="RotateMatrix">
				<summary>function painter:RotateMatrix(angle, x, y, z)&#13;&#10;multiply the current matrix by a rotation matrix 
				</summary>
				<parameter name="angle"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="384" name="ScaleMatrix">
				<summary>function painter:ScaleMatrix(x, y, z)&#13;&#10;multiply the current matrix by a scaling matrix 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="391" name="GetScaling">
				<summary>function painter:GetScaling()&#13;&#10;get current scaling.&#13;&#10; &#32; @return x,y,z of current scaling. 
				</summary>
				<returns>return ,y,z of current scaling. 
				</returns>
			</function>
			<function line="397" name="GetCurrentMatrix">
				<summary>function painter:GetCurrentMatrix()&#13;&#10;get current matrix&#13;&#10; &#32; @return a new Matrix4
				</summary>
				<returns>return new Matrix4
				</returns>
			</function>
			<function line="403" name="EnableAutoLineWidth">
				<summary>function painter:EnableAutoLineWidth(bEnable)&#13;&#10;if enabled, the minimum line width is 1 pixel for 3d lines.&#13;&#10; &#32; @param bEnable: if nil or true, it means true
				</summary>
				<parameter name="bEnable">if nil or true, it means true
				</parameter>
			</function>
			<function line="415" name="DrawCircle">
				<summary>function painter:DrawCircle(cx,cy,cz, radius, axis, bFill, segment, fromAngle, toAngle, center_offset)&#13;&#10;draw a circle perpendicular to a specified axis with center and radius&#13;&#10; &#32; @param axis: "x", "y", "z". perpendicular to which axis&#13;&#10; &#32; @param bFill: if true (default to nil), we will fill the circle with current brush&#13;&#10; &#32; @param segment: if nil, we will automatically determine segment by radius.&#13;&#10; &#32; @param fromAngle: default to 0;&#13;&#10; &#32; @param toAngle: default to 2*math.pi;&#13;&#10; &#32; @param center_offset: default to 0.
				</summary>
				<parameter name="cx"/>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="radius"/>
				<parameter name="axis">"x", "y", "z". perpendicular to which axis
				</parameter>
				<parameter name="bFill">if true (default to nil), we will fill the circle with current brush
				</parameter>
				<parameter name="segment">if nil, we will automatically determine segment by radius.
				</parameter>
				<parameter name="fromAngle">default to 0;
				</parameter>
				<parameter name="toAngle">default to 2*math.pi;
				</parameter>
				<parameter name="center_offset">default to 0.
				</parameter>
			</function>
		</table>
		<table name="Attribute" src="script/ide/System/Core/Attribute.lua">
			<function line="28" name="ctor">
				<summary>function Attribute:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="33" name="init">
				<summary>function Attribute:init(attr, name)&#13;&#10;&#13;&#10; &#32; @param attr: the attribute object&#13;&#10; &#32; @param name: field name string. 
				</summary>
				<parameter name="attr">the attribute object
				</parameter>
				<parameter name="name">field name string. 
				</parameter>
			</function>
			<function line="39" name="IsValid">
				<summary>function Attribute:IsValid()&#13;&#10;
				</summary>
			</function>
			<function line="46" name="GetAttributeObject">
				<summary>function Attribute:GetAttributeObject()&#13;&#10;get the underlying attribute object. 
				</summary>
			</function>
			<function line="55" name="GetObject">
				<summary>function Attribute:GetObject()&#13;&#10;get the underlying object 
				</summary>
			</function>
			<function line="61" name="GetName">
				<summary>function Attribute:GetName()&#13;&#10;
				</summary>
			</function>
			<function line="65" name="GetIndex">
				<summary>function Attribute:GetIndex()&#13;&#10;
				</summary>
			</function>
			<function line="73" name="GetType">
				<summary>function Attribute:GetType()&#13;&#10;
				</summary>
			</function>
			<function line="81" name="IsFieldReadOnly">
				<summary>function Attribute:IsFieldReadOnly()&#13;&#10;
				</summary>
			</function>
			<function line="87" name="GetSchematics">
				<summary>function Attribute:GetSchematics()&#13;&#10;
				</summary>
			</function>
			<function line="95" name="GetSchematicsType">
				<summary>function Attribute:GetSchematicsType()&#13;&#10;
				</summary>
			</function>
			<function line="103" name="Call">
				<summary>function Attribute:Call()&#13;&#10;call field by name. This function is only valid when The field type is void. &#13;&#10;It simply calls the function associated with the field name.
				</summary>
			</function>
			<function line="111" name="Reset">
				<summary>function Attribute:Reset()&#13;&#10;Reset the field to its initial or default value. 
				</summary>
			</function>
			<function line="118" name="InvokeEditor">
				<summary>function Attribute:InvokeEditor(sParameters)&#13;&#10;Invoke an (external) editor for a given field. This is usually for NPL script field
				</summary>
				<parameter name="sParameters"/>
			</function>
			<function line="125" name="GetValue">
				<summary>function Attribute:GetValue(output)&#13;&#10;
				</summary>
				<parameter name="output"/>
			</function>
			<function line="133" name="SetValue">
				<summary>function Attribute:SetValue(input)&#13;&#10;
				</summary>
				<parameter name="input"/>
			</function>
			<function line="141" name="SetValueInternal">
				<summary>function Attribute:SetValueInternal(input)&#13;&#10;same as SetValue, except that some implementation may not send signals like valueChanged even data is modified. &#13;&#10;it will automatically fallback to SetValue if not such implementation is provided by the attribute object. &#32;
				</summary>
				<parameter name="input"/>
			</function>
		</table>
		<table name="AttributeObject" src="script/ide/System/Core/AttributeObject.lua">
			<function line="55" name="ctor">
				<summary>function AttributeObject:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="58" name="GetAttributeObject">
				<summary>function AttributeObject:GetAttributeObject()&#13;&#10;
				</summary>
			</function>
			<function line="62" name="QueryObject">
				<summary>function AttributeObject:QueryObject()&#13;&#10;
				</summary>
			</function>
			<function line="68" name="findPlug">
				<summary>function AttributeObject:findPlug(name)&#13;&#10;find and return a given attribute plug object. &#13;&#10;this is a public helper function. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="75" name="equals">
				<summary>function AttributeObject:equals(obj)&#13;&#10;return true, if this object is the same as the given object.
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="81" name="GetChild">
				<summary>function AttributeObject:GetChild(sName)&#13;&#10;get child attribute object. this can be regarded as an intrusive data model of a given object. &#13;&#10;once you get an attribute object, you can use this model class to access all data in the hierarchy.
				</summary>
				<parameter name="sName"/>
			</function>
			<function line="85" name="GetChildAt">
				<summary>function AttributeObject:GetChildAt(nRowIndex, nColumnIndex)&#13;&#10;&#13;&#10; &#32; @param nColumnIndex: nil to default to 0;
				</summary>
				<parameter name="nRowIndex"/>
				<parameter name="nColumnIndex">nil to default to 0;
				</parameter>
			</function>
			<function line="89" name="GetChildCount">
				<summary>function AttributeObject:GetChildCount(nColumnIndex)&#13;&#10;&#13;&#10; &#32; @param nColumnIndex: if nil, default to 0. 
				</summary>
				<parameter name="nColumnIndex">if nil, default to 0. 
				</parameter>
			</function>
			<function line="94" name="GetColumnCount">
				<summary>function AttributeObject:GetColumnCount()&#13;&#10;we support multi-dimensional child object. by default objects have only one column. 
				</summary>
			</function>
			<function line="99" name="IsValid">
				<summary>function AttributeObject:IsValid()&#13;&#10;check if the object is valid
				</summary>
			</function>
			<function line="103" name="GetClassID">
				<summary>function AttributeObject:GetClassID()&#13;&#10;
				</summary>
			</function>
			<function line="107" name="GetClassName">
				<summary>function AttributeObject:GetClassName()&#13;&#10;class name
				</summary>
			</function>
			<function line="112" name="GetClassDescription">
				<summary>function AttributeObject:GetClassDescription()&#13;&#10;class description
				</summary>
			</function>
			<function line="123" name="SetOrder">
				<summary>function AttributeObject:SetOrder(order)&#13;&#10;
				</summary>
				<parameter name="order"/>
			</function>
			<function line="127" name="GetOrder">
				<summary>function AttributeObject:GetOrder()&#13;&#10;get which order fields are saved.
				</summary>
			</function>
			<function line="131" name="GetFieldNum">
				<summary>function AttributeObject:GetFieldNum()&#13;&#10;get the total number of field.
				</summary>
			</function>
			<function line="135" name="GetFieldName">
				<summary>function AttributeObject:GetFieldName(nIndex)&#13;&#10;get the total number of field.&#13;&#10;get field at the specified index. "" will be returned if index is out of range.
				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="142" name="GetFieldIndex">
				<summary>function AttributeObject:GetFieldIndex(sFieldname)&#13;&#10;get field index of a given field name. -1 will be returned if name not found.&#13;&#10; &#32; @param sFieldname&#13;&#10; &#32; @return index or -1
				</summary>
				<parameter name="sFieldname">
				</parameter>
				<returns>return or -1
				</returns>
			</function>
			<function line="150" name="GetFieldType">
				<summary>function AttributeObject:GetFieldType(nIndex)&#13;&#10;get the field type as string&#13;&#10; &#32; @param nIndex : index of the field&#13;&#10; &#32; @return one of the following type may be returned &#13;&#10;"void" "bool" "string" "int" "float" "float_float" "float_float_float" "double" "vector2" "vector3" "vector4" "enum" "deprecated" ""
				</summary>
				<parameter name="nIndex">index of the field
				</parameter>
				<returns>return of the following type may be returned &#13;&#10;"void" "bool" "string" "int" "float" "float_float" "float_float_float" "double" "vector2" "vector3" "vector4" "enum" "deprecated" ""
				</returns>
			</function>
			<function line="157" name="IsFieldReadOnly">
				<summary>function AttributeObject:IsFieldReadOnly(nIndex)&#13;&#10;whether the field is read only. a field is ready only if and only if it has only a get method.&#13;&#10; &#32; @param nIndex : index of the field&#13;&#10; &#32; @return true if it is ready only or field does not exist
				</summary>
				<parameter name="nIndex">index of the field
				</parameter>
				<returns>return if it is ready only or field does not exist
				</returns>
			</function>
			<function line="164" name="GetFieldSchematics">
				<summary>function AttributeObject:GetFieldSchematics(nIndex)&#13;&#10;Get Field Schematics string&#13;&#10; &#32; @param nIndex: index of the field&#13;&#10; &#32; @return "" will be returned if index is out of range
				</summary>
				<parameter name="nIndex">index of the field
				</parameter>
				<returns>return "" will be returned if index is out of range
				</returns>
			</function>
			<function line="175" name="GetSchematicsType">
				<summary>function AttributeObject:GetSchematicsType(nIndex)&#13;&#10;parse the schema type from the schema string.&#13;&#10; &#32; @return : simple schema type. it may be any of the following value. &#13;&#10;unspecified: ""&#13;&#10;color3	":rgb" &#13;&#10;file	":file" &#13;&#10;script	":script"&#13;&#10;integer	":int"
				</summary>
				<parameter name="nIndex"/>
				<returns>return simple schema type. it may be any of the following value. &#13;&#10;unspecified: ""&#13;&#10;color3	":rgb" &#13;&#10;file	":file" &#13;&#10;script	":script"&#13;&#10;integer	":int"
				</returns>
			</function>
			<function line="189" name="GetField">
				<summary>function AttributeObject:GetField(sFieldname, output)&#13;&#10;get field by name.&#13;&#10;e.g. suppose att is the attribute object.&#13;&#10;local bGloble = att:GetField("global", true);&#13;&#10;local facing = att:GetField("facing", 0);&#13;&#10;local pos = att:GetField("position", {0,0,0});&#13;&#10;pos[1] = pos[1]+100;pos[2] = 0;pos[3] = 10;&#13;&#10; &#32; @param sFieldname: field name&#13;&#10; &#32; @param output: default value. if field type is vectorN, output is a table with N items.&#13;&#10; &#32; @return: return the field result. If field not found, output will be returned. &#13;&#10;if field type is vectorN, return a table with N items.Please note table index start from 1
				</summary>
				<parameter name="sFieldname">field name
				</parameter>
				<parameter name="output">default value. if field type is vectorN, output is a table with N items.
				</parameter>
				<returns>return return the field result. If field not found, output will be returned. &#13;&#10;if field type is vectorN, return a table with N items.Please note table index start from 1
				</returns>
			</function>
			<function line="200" name="SetField">
				<summary>function AttributeObject:SetField(sFieldname, input)&#13;&#10;set field by name &#13;&#10;e.g. suppose att is the attribute object.&#13;&#10;att:SetField("facing", 3.14);&#13;&#10;att:SetField("position", {100,0,0});&#13;&#10; &#32; @param sFieldname: field name&#13;&#10; &#32; @param input: input value. if field type is vectorN, input is a table with N items.--
				</summary>
				<parameter name="sFieldname">field name
				</parameter>
				<parameter name="input">input value. if field type is vectorN, input is a table with N items.--
				</parameter>
			</function>
			<function line="206" name="CallField">
				<summary>function AttributeObject:CallField(sFieldname)&#13;&#10;call field by name. This function is only valid when The field type is void. &#13;&#10;It simply calls the function associated with the field name.
				</summary>
				<parameter name="sFieldname"/>
			</function>
			<function line="209" name="PrintObject">
				<summary>function AttributeObject:PrintObject(file)&#13;&#10;
				</summary>
				<parameter name="file"/>
			</function>
			<function line="215" name="ResetField">
				<summary>function AttributeObject:ResetField(nFieldID)&#13;&#10;Reset the field to its initial or default value.&#13;&#10; &#32; @param nFieldID : field ID&#13;&#10; &#32; @return true if value is set; false if value not set. 
				</summary>
				<parameter name="nFieldID">field ID
				</parameter>
				<returns>return if value is set; false if value not set. 
				</returns>
			</function>
			<function line="222" name="InvokeEditor">
				<summary>function AttributeObject:InvokeEditor(nFieldID, sParameters)&#13;&#10;Invoke an (external) editor for a given field. This is usually for NPL script field&#13;&#10; &#32; @param nFieldID : field ID&#13;&#10; &#32; @param sParameters : the parameter passed to the editor&#13;&#10; &#32; @return true if editor is invoked, false if failed or field has no editor. 
				</summary>
				<parameter name="nFieldID">field ID
				</parameter>
				<parameter name="sParameters">the parameter passed to the editor
				</parameter>
				<returns>return if editor is invoked, false if failed or field has no editor. 
				</returns>
			</function>
			<function line="239" name="GetDynamicField">
				<summary>function AttributeObject:GetDynamicField(sFieldnameOrIndex, output)&#13;&#10;get field by name or index.&#13;&#10;e.g. suppose att is the attribute object.&#13;&#10;local bGloble = att:GetField("URL", nil);&#13;&#10;local facing = att:GetField("Title", "default one");&#13;&#10; &#32; @param sFieldname: field name string or number index&#13;&#10; &#32; @param output: default value. if field type is vectorN, output is a table with N items.&#13;&#10; &#32; @return: return the field result. If field not found, output will be returned. &#13;&#10;if field type is vectorN, return a table with N items.Please note table index start from 1
				</summary>
				<parameter name="sFieldnameOrIndex"/>
				<parameter name="output">default value. if field type is vectorN, output is a table with N items.
				</parameter>
				<returns>return return the field result. If field not found, output will be returned. &#13;&#10;if field type is vectorN, return a table with N items.Please note table index start from 1
				</returns>
			</function>
			<function line="245" name="GetDynamicFieldNameByIndex">
				<summary>function AttributeObject:GetDynamicFieldNameByIndex(nIndex)&#13;&#10;get field name by index
				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="249" name="GetDynamicFieldCount">
				<summary>function AttributeObject:GetDynamicFieldCount()&#13;&#10;how many dynamic field this object currently have.
				</summary>
			</function>
			<function line="258" name="SetDynamicField">
				<summary>function AttributeObject:SetDynamicField(sFieldname, input)&#13;&#10;set field by name &#13;&#10;e.g. suppose att is the attribute object.&#13;&#10;att:SetDynamicField("URL", 3.14);&#13;&#10;att:SetDynamicField("Title", {100,0,0});&#13;&#10; &#32; @param sFieldname: field name&#13;&#10; &#32; @param input: input value. can be value or string type--
				</summary>
				<parameter name="sFieldname">field name
				</parameter>
				<parameter name="input">input value. can be value or string type--
				</parameter>
			</function>
			<function line="262" name="RemoveAllDynamicFields">
				<summary>function AttributeObject:RemoveAllDynamicFields()&#13;&#10;remove all dynamic fields
				</summary>
			</function>
			<function line="267" name="AddDynamicField">
				<summary>function AttributeObject:AddDynamicField(sName, dwType)&#13;&#10;add dynamic field and return field index&#13;&#10; &#32; @return field index or -1
				</summary>
				<parameter name="sName"/>
				<parameter name="dwType"/>
				<returns>return index or -1
				</returns>
			</function>
		</table>
		<table name="Screen" src="script/ide/System/Windows/Screen.lua">
			<function line="24" name="ctor">
				<summary>function Screen:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="30" name="GetGUIRoot">
				<summary>function Screen:GetGUIRoot()&#13;&#10;
				</summary>
			</function>
			<function line="37" name="GetWidth">
				<summary>function Screen:GetWidth()&#13;&#10;
				</summary>
			</function>
			<function line="41" name="GetHeight">
				<summary>function Screen:GetHeight()&#13;&#10;
				</summary>
			</function>
			<function line="45" name="OnSizeChange">
				<summary>function Screen:OnSizeChange(width, height)&#13;&#10;
				</summary>
				<parameter name="width"/>
				<parameter name="height"/>
			</function>
			<function line="53" name="SetMinimumScreenSize">
				<summary>function Screen:SetMinimumScreenSize(minWidth, minHeight)&#13;&#10;
				</summary>
				<parameter name="minWidth"/>
				<parameter name="minHeight"/>
			</function>
			<function line="59" name="GetMinimumScreenSize">
				<summary>function Screen:GetMinimumScreenSize()&#13;&#10;
				</summary>
			</function>
			<function line="68" name="RestoreUIDesignResolution">
				<summary>function Screen:RestoreUIDesignResolution(callbackFunc)&#13;&#10;restore resolution to default
				</summary>
				<parameter name="callbackFunc"/>
			</function>
			<function line="78" name="SetUserUIScaling">
				<summary>function Screen:SetUserUIScaling(userUIScaling)&#13;&#10;&#13;&#10; &#32; @param scaling: if nil, it is user specified. 
				</summary>
				<parameter name="userUIScaling"/>
			</function>
			<function line="84" name="GetUserUIScaling">
				<summary>function Screen:GetUserUIScaling()&#13;&#10;this may be nil if user did not specify it explicitly. 
				</summary>
			</function>
			<function line="88" name="GetDesignUIResolution">
				<summary>function Screen:GetDesignUIResolution()&#13;&#10;
				</summary>
			</function>
			<function line="92" name="GetWindowSolution">
				<summary>function Screen:GetWindowSolution()&#13;&#10;
				</summary>
			</function>
			<function line="115" name="GetScreenSolution">
				<summary>function Screen:GetScreenSolution()&#13;&#10;get unscaled screen resolution.&#13;&#10; &#32; @NOTE: This function only return creation window size, which is pretty buggy. 
				</summary>
			</function>
			<function line="130" name="AutoAdjustUIScalingImp">
				<summary>function Screen:AutoAdjustUIScalingImp()&#13;&#10;
				</summary>
			</function>
			<function line="206" name="PushDesignResolution">
				<summary>function Screen:PushDesignResolution(width, height)&#13;&#10;
				</summary>
				<parameter name="width"/>
				<parameter name="height"/>
			</function>
			<function line="211" name="PopDesignResolution">
				<summary>function Screen:PopDesignResolution()&#13;&#10;
				</summary>
			</function>
			<function line="229" name="GetTopDesignResolution">
				<summary>function Screen:GetTopDesignResolution()&#13;&#10;
				</summary>
			</function>
			<function line="239" name="ScheduleUIResolutionUpdate">
				<summary>function Screen:ScheduleUIResolutionUpdate(delayTime, callbackFunc)&#13;&#10;
				</summary>
				<parameter name="delayTime"/>
				<parameter name="callbackFunc"/>
			</function>
			<function line="260" name="ChangeUIDesignResolution">
				<summary>function Screen:ChangeUIDesignResolution(width, height, callbackFunc)&#13;&#10;this function is useful when you want to match a given design resolution as much as possible for the entire UI. &#13;&#10;in touch devices, we may use a common design resolution like 1280*720.&#13;&#10; &#32; @param width, height: we will ensure the adjusted ui resolution is bigger than width*height. &#13;&#10;and at least one side equals to width or height.&#13;&#10;If nil, we will make UIScale to 1, 1&#13;&#10; &#32; @param callbackFunc: the callback function when resolution is ready. 
				</summary>
				<parameter name="width">, height: we will ensure the adjusted ui resolution is bigger than width*height. &#13;&#10;and at least one side equals to width or height.&#13;&#10;If nil, we will make UIScale to 1, 1
				</parameter>
				<parameter name="height"/>
				<parameter name="callbackFunc">the callback function when resolution is ready. 
				</parameter>
			</function>
			<function line="270" name="SetUIScale">
				<summary>function Screen:SetUIScale(scalingX, scalingY)&#13;&#10;&#13;&#10; &#32; @param scalingX: default to 1&#13;&#10; &#32; @param scalingY: default to scalingX
				</summary>
				<parameter name="scalingX">default to 1
				</parameter>
				<parameter name="scalingY">default to scalingX
				</parameter>
			</function>
			<function line="281" name="GetUIScale">
				<summary>function Screen:GetUIScale(bForceUpdate)&#13;&#10;return scaleX, scaleY
				</summary>
				<parameter name="bForceUpdate"/>
			</function>
			<function line="287" name="GetUIScaling">
				<summary>function Screen:GetUIScaling(bForceUpdate)&#13;&#10;return {scaleX, scaleY}
				</summary>
				<parameter name="bForceUpdate"/>
			</function>
		</table>
		<table name="Window" src="script/ide/System/Windows/Window.lua">
			<function line="60" name="ctor">
				<summary>function Window:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="70" name="Show">
				<summary>function Window:Show(name_or_params, parent, alignment, left, top, width, height, zorder)&#13;&#10;show and bind to a new ParaUI control object to receive events from.&#13;&#10; &#32; @param name_or_params: name or params {}&#13;&#10; &#32; @param parent: if nil, it is the root GUI object.&#13;&#10; &#32; @param left,top, width, height: if nil, we will render at full size of parent. &#32;
				</summary>
				<parameter name="name_or_params">name or params {}
				</parameter>
				<parameter name="parent">if nil, it is the root GUI object.
				</parameter>
				<parameter name="alignment"/>
				<parameter name="left">,top, width, height: if nil, we will render at full size of parent. &#32;
				</parameter>
				<parameter name="top"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<parameter name="zorder"/>
			</function>
			<function line="90" name="Goto">
				<summary>function Window:Goto(url)&#13;&#10;goto a new mcml v2 url
				</summary>
				<parameter name="url"/>
			</function>
			<function line="95" name="RefreshUrlComponent">
				<summary>function Window:RefreshUrlComponent()&#13;&#10;
				</summary>
			</function>
			<function line="106" name="LoadComponent">
				<summary>function Window:LoadComponent(url)&#13;&#10;&#13;&#10; &#32; @return mcml page object if valid
				</summary>
				<parameter name="url"/>
				<returns>return page object if valid
				</returns>
			</function>
			<function line="115" name="GetZOrder">
				<summary>function Window:GetZOrder()&#13;&#10;
				</summary>
			</function>
			<function line="119" name="SetZOrder">
				<summary>function Window:SetZOrder(zorder)&#13;&#10;
				</summary>
				<parameter name="zorder"/>
			</function>
			<function line="130" name="FilterImage">
				<summary>function Window:FilterImage(filename)&#13;&#10;virtual function
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="136" name="ShowWithParams">
				<summary>function Window:ShowWithParams(params)&#13;&#10;&#13;&#10; &#32; @param params: {url="", alignment, x,y,width, height, allowDrag,zorder, enable_esc_key, DestroyOnClose, parent, pageGlobalTable}&#13;&#10;pageGlobalTable can be a custom page environment table, if nil, it will be the global _G. 
				</summary>
				<parameter name="params">{url="", alignment, x,y,width, height, allowDrag,zorder, enable_esc_key, DestroyOnClose, parent, pageGlobalTable}&#13;&#10;pageGlobalTable can be a custom page environment table, if nil, it will be the global _G. 
				</parameter>
			</function>
			<function line="198" name="CloseWindow">
				<summary>function Window:CloseWindow(bDestroy)&#13;&#10;&#13;&#10; &#32; @param bDestroy: if true or nil, it will destroy the window, otherwise it will just hide it.
				</summary>
				<parameter name="bDestroy">if true or nil, it will destroy the window, otherwise it will just hide it.
				</parameter>
			</function>
			<function line="222" name="GetNativeWindow">
				<summary>function Window:GetNativeWindow()&#13;&#10;
				</summary>
			</function>
			<function line="227" name="SetSizeToUsedSize">
				<summary>function Window:SetSizeToUsedSize()&#13;&#10;set the window's size to be the layout's used size
				</summary>
			</function>
			<function line="238" name="destroy_sys">
				<summary>function Window:destroy_sys()&#13;&#10;virtual: if this element is a native window, destroy it. 
				</summary>
			</function>
			<function line="246" name="create_sys">
				<summary>function Window:create_sys(native_window, initializeWindow, destroyOldWindow)&#13;&#10;bind to native window.
				</summary>
				<parameter name="native_window"/>
				<parameter name="initializeWindow"/>
				<parameter name="destroyOldWindow"/>
			</function>
			<function line="352" name="handleGeometryChangeEvent">
				<summary>function Window:handleGeometryChangeEvent()&#13;&#10;
				</summary>
			</function>
			<function line="356" name="isWindow">
				<summary>function Window:isWindow()&#13;&#10;
				</summary>
			</function>
			<function line="361" name="handleMouseEvent">
				<summary>function Window:handleMouseEvent(event)&#13;&#10;&#13;&#10; &#32; @param event_type: "mousePressEvent", "mouseMoveEvent", "mouseWheelEvent", "mouseReleaseEvent"
				</summary>
				<parameter name="event"/>
			</function>
			<function line="393" name="handleMouseEnterLeaveEvent">
				<summary>function Window:handleMouseEnterLeaveEvent(mouse_event)&#13;&#10;&#13;&#10; &#32; @param event_type: "mouseEnterEvent", "mouseLeaveEvent"
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="417" name="UpdateGeometry_Sys">
				<summary>function Window:UpdateGeometry_Sys()&#13;&#10;update geometry according to native ParaUI object
				</summary>
			</function>
			<function line="429" name="GetScreenPos">
				<summary>function Window:GetScreenPos()&#13;&#10;
				</summary>
			</function>
			<function line="433" name="setGeometry_sys">
				<summary>function Window:setGeometry_sys(ax, ay, aw, ah)&#13;&#10;
				</summary>
				<parameter name="ax"/>
				<parameter name="ay"/>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="484" name="show_sys">
				<summary>function Window:show_sys()&#13;&#10;
				</summary>
			</function>
			<function line="488" name="hide_sys">
				<summary>function Window:hide_sys()&#13;&#10;
				</summary>
			</function>
			<function line="492" name="setVisible_sys">
				<summary>function Window:setVisible_sys(visible)&#13;&#10;
				</summary>
				<parameter name="visible"/>
			</function>
			<function line="499" name="EnableSelfPaint">
				<summary>function Window:EnableSelfPaint(bSelfPaint)&#13;&#10;set whether the window will paint on its own render target. default is false. 
				</summary>
				<parameter name="bSelfPaint"/>
			</function>
			<function line="507" name="repaint">
				<summary>function Window:repaint()&#13;&#10;force repaint in the next frame.
				</summary>
			</function>
			<function line="521" name="SetFocus_sys">
				<summary>function Window:SetFocus_sys(focusPolicy)&#13;&#10;set key focus to the window.&#13;&#10; &#32; @param focusPolicy: the triggering UI Element's focus policy
				</summary>
				<parameter name="focusPolicy">the triggering UI Element's focus policy
				</parameter>
			</function>
			<function line="539" name="SetCanHaveFocus">
				<summary>function Window:SetCanHaveFocus(bCanHaveFocus)&#13;&#10;
				</summary>
				<parameter name="bCanHaveFocus"/>
			</function>
			<function line="546" name="SetInputMethodEnabled">
				<summary>function Window:SetInputMethodEnabled(bEnabled)&#13;&#10;
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="555" name="update">
				<summary>function Window:update()&#13;&#10;Updates the widget unless updates are disabled or the widget is hidden.&#13;&#10;This function does not cause an immediate repaint; instead it schedules a paint in the next frame.
				</summary>
			</function>
			<function line="560" name="markDirty">
				<summary>function Window:markDirty()&#13;&#10;causing a repaint
				</summary>
			</function>
			<function line="567" name="handleRender">
				<summary>function Window:handleRender()&#13;&#10;handle ondraw callback from system ParaUI object. 
				</summary>
			</function>
			<function line="581" name="SetAutoClearBackground">
				<summary>function Window:SetAutoClearBackground(bEnabled)&#13;&#10;whether to automatically clear the background to fully transparent when doing self paint on its own render target.
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="591" name="SetMouseCaptureEnabled">
				<summary>function Window:SetMouseCaptureEnabled(bEnabled)&#13;&#10;Sets whether mouse capture should be enabled or not&#13;&#10;If the return value is true, the window receives all mouse events until SetMouseGrabEnabled(false) is&#13;&#10;called; other windows get no mouse events at all. Keyboard events are not affected.
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="598" name="IsMouseCaptureEnabled">
				<summary>function Window:IsMouseCaptureEnabled()&#13;&#10;
				</summary>
			</function>
			<function line="602" name="handleActivateEvent">
				<summary>function Window:handleActivateEvent(isActivate)&#13;&#10;
				</summary>
				<parameter name="isActivate"/>
			</function>
			<function line="611" name="handleDestroy_sys">
				<summary>function Window:handleDestroy_sys()&#13;&#10;native windows have been forcibly closed. 
				</summary>
			</function>
			<function line="626" name="windowDestroyEvent">
				<summary>function Window:windowDestroyEvent()&#13;&#10;virtual called when native window is destroyed. 
				</summary>
			</function>
			<function line="631" name="mapToGlobal">
				<summary>function Window:mapToGlobal(pos)&#13;&#10;convert to global position&#13;&#10; &#32; @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="641" name="mapFromGlobal">
				<summary>function Window:mapFromGlobal(pos)&#13;&#10;convert from global to local pos.&#13;&#10; &#32; @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="649" name="SetUIScaling">
				<summary>function Window:SetUIScaling(scaleX, scaleY)&#13;&#10;
				</summary>
				<parameter name="scaleX"/>
				<parameter name="scaleY"/>
			</function>
			<function line="662" name="GetUIScaling">
				<summary>function Window:GetUIScaling()&#13;&#10;
				</summary>
			</function>
			<function line="666" name="setCompositionPoint_sys">
				<summary>function Window:setCompositionPoint_sys(p)&#13;&#10;
				</summary>
				<parameter name="p"/>
			</function>
			<function line="672" name="paintEvent">
				<summary>function Window:paintEvent(painter)&#13;&#10;
				</summary>
				<parameter name="painter"/>
			</function>
			<function line="676" name="mousePressEvent">
				<summary>function Window:mousePressEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="688" name="mouseMoveEvent">
				<summary>function Window:mouseMoveEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="709" name="mouseReleaseEvent">
				<summary>function Window:mouseReleaseEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="718" name="SetEnabled">
				<summary>function Window:SetEnabled(enabled)&#13;&#10;
				</summary>
				<parameter name="enabled"/>
			</function>
			<function line="725" name="isEnabled">
				<summary>function Window:isEnabled()&#13;&#10;
				</summary>
			</function>
			<function line="729" name="Page">
				<summary>function Window:Page()&#13;&#10;
				</summary>
			</function>
			<function line="735" name="HandlePagePressKeyEvent">
				<summary>function Window:HandlePagePressKeyEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="746" name="SetMinimumScreenSize">
				<summary>function Window:SetMinimumScreenSize(minScreenWidth,minScreenHeight)&#13;&#10;the parent container must be larger than or equal to this screen size&#13;&#10;otherwise we will scale the screen.
				</summary>
				<parameter name="minScreenWidth"/>
				<parameter name="minScreenHeight"/>
			</function>
			<function line="752" name="DetectViewportSizeChange">
				<summary>function Window:DetectViewportSizeChange()&#13;&#10;
				</summary>
			</function>
			<function line="763" name="SetDesignResolution">
				<summary>function Window:SetDesignResolution(width, height)&#13;&#10;&#13;&#10; &#32; @param width, height: we will ensure the adjusted ui resolution is bigger than width*height. &#13;&#10;and at least one side equals to width or height.
				</summary>
				<parameter name="width">, height: we will ensure the adjusted ui resolution is bigger than width*height. &#13;&#10;and at least one side equals to width or height.
				</parameter>
				<parameter name="height"/>
			</function>
			<function line="769" name="OnViewportSizeChange">
				<summary>function Window:OnViewportSizeChange()&#13;&#10;
				</summary>
			</function>
			<function line="811" name="SetClickThrough">
				<summary>function Window:SetClickThrough(v)&#13;&#10;
				</summary>
				<parameter name="v"/>
			</function>
		</table>
		<table name="UIElement" src="script/ide/System/Windows/UIElement.lua">
			<function line="104" name="ctor">
				<summary>function UIElement:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="115" name="init">
				<summary>function UIElement:init(parent)&#13;&#10;init and return the object. &#13;&#10;If you add a child widget to an already visible widget you must&#13;&#10;explicitly show the child to make it visible.
				</summary>
				<parameter name="parent"/>
			</function>
			<function line="120" name="GetID">
				<summary>function UIElement:GetID()&#13;&#10;
				</summary>
			</function>
			<function line="126" name="GetUIName">
				<summary>function UIElement:GetUIName(bSearchParent)&#13;&#10;user interface name&#13;&#10; &#32; @param bSearchParent: if true, we will also find its parent by at most 4 levels. This is useful for compositive controls
				</summary>
				<parameter name="bSearchParent">if true, we will also find its parent by at most 4 levels. This is useful for compositive controls
				</parameter>
			</function>
			<function line="143" name="SetUIName">
				<summary>function UIElement:SetUIName(uiName)&#13;&#10;
				</summary>
				<parameter name="uiName"/>
			</function>
			<function line="150" name="SetParent">
				<summary>function UIElement:SetParent(parent)&#13;&#10;
				</summary>
				<parameter name="parent"/>
			</function>
			<function line="166" name="lessPriority">
				<summary>function UIElement:lessPriority(elem)&#13;&#10;
				</summary>
				<parameter name="elem"/>
			</function>
			<function line="173" name="ApplyCss">
				<summary>function UIElement:ApplyCss(css)&#13;&#10;virtual: apply css style
				</summary>
				<parameter name="css"/>
			</function>
			<function line="207" name="isAncestorOf">
				<summary>function UIElement:isAncestorOf(child)&#13;&#10;Returns true if this object is a parent, (or grandparent and so on&#13;&#10;to any level), of the given child, and both objects are within&#13;&#10;the same window; otherwise returns false.
				</summary>
				<parameter name="child"/>
			</function>
			<function line="219" name="isWindow">
				<summary>function UIElement:isWindow()&#13;&#10;
				</summary>
			</function>
			<function line="224" name="GetWindow">
				<summary>function UIElement:GetWindow()&#13;&#10;the native window object at the root of parent.
				</summary>
			</function>
			<function line="231" name="parentWidget">
				<summary>function UIElement:parentWidget()&#13;&#10;
				</summary>
			</function>
			<function line="235" name="isHidden">
				<summary>function UIElement:isHidden() &#13;&#10;
				</summary>
			</function>
			<function line="239" name="isVisible">
				<summary>function UIElement:isVisible()&#13;&#10;
				</summary>
			</function>
			<function line="245" name="hide">
				<summary>function UIElement:hide()&#13;&#10;A hidden widget will only become visible when show() is called on&#13;&#10;it. It will not be automatically shown when the parent is shown.
				</summary>
			</function>
			<function line="249" name="hide_sys">
				<summary>function UIElement:hide_sys()&#13;&#10;
				</summary>
			</function>
			<function line="253" name="show">
				<summary>function UIElement:show()&#13;&#10;Shows the widget and its child widgets.
				</summary>
			</function>
			<function line="259" name="show_recursive">
				<summary>function UIElement:show_recursive()&#13;&#10;Makes the widget visible in the isVisible() meaning of the word.&#13;&#10;It is only called for toplevels or widgets with visible parents.
				</summary>
			</function>
			<function line="276" name="show_sys">
				<summary>function UIElement:show_sys()&#13;&#10;
				</summary>
			</function>
			<function line="279" name="show_helper">
				<summary>function UIElement:show_helper()&#13;&#10;
				</summary>
			</function>
			<function line="303" name="createRecursively">
				<summary>function UIElement:createRecursively()&#13;&#10;
				</summary>
			</function>
			<function line="318" name="create">
				<summary>function UIElement:create(window, initializeWindow, destroyOldWindow)&#13;&#10;&#13;&#10; &#32; @param window: native window object
				</summary>
				<parameter name="window">native window object
				</parameter>
				<parameter name="initializeWindow"/>
				<parameter name="destroyOldWindow"/>
			</function>
			<function line="326" name="create_sys">
				<summary>function UIElement:create_sys()&#13;&#10;
				</summary>
			</function>
			<function line="329" name="aboutToDestroy">
				<summary>function UIElement:aboutToDestroy()&#13;&#10;
				</summary>
			</function>
			<function line="332" name="deactivateWidgetCleanup">
				<summary>function UIElement:deactivateWidgetCleanup()&#13;&#10;
				</summary>
			</function>
			<function line="343" name="destroy_sys">
				<summary>function UIElement:destroy_sys()&#13;&#10;virtual: if this element is a native window, destroy it. 
				</summary>
			</function>
			<function line="347" name="destroy">
				<summary>function UIElement:destroy(destroyWindow)&#13;&#10;&#13;&#10; &#32; @param destroyWindow: default to true. true to destroy system level window.
				</summary>
				<parameter name="destroyWindow">default to true. true to destroy system level window.
				</parameter>
			</function>
			<function line="370" name="isCreated">
				<summary>function UIElement:isCreated()&#13;&#10;
				</summary>
			</function>
			<function line="374" name="setVisible">
				<summary>function UIElement:setVisible(visible)&#13;&#10;
				</summary>
				<parameter name="visible"/>
			</function>
			<function line="437" name="focusNextPrevChild">
				<summary>function UIElement:focusNextPrevChild(bNext)&#13;&#10;TODO:
				</summary>
				<parameter name="bNext"/>
			</function>
			<function line="443" name="event">
				<summary>function UIElement:event(event)&#13;&#10;called whenever an event comes. Subclass can overwrite this function.&#13;&#10; &#32; @param handlerName: "sizeEvent", "paintEvent", "mouseDownEvent", "mouseUpEvent", etc.&#13;&#10; &#32; @param event: the event object. 
				</summary>
				<parameter name="event">the event object. 
				</parameter>
			</function>
			<function line="461" name="sizeEvent">
				<summary>function UIElement:sizeEvent(event)&#13;&#10;The resize event is called whenever the window is resized in the windowing system,&#13;&#10;either directly through the windowing system acknowledging a setGeometry() or resize() request,&#13;&#10;or indirectly through the user resizing the window manually.
				</summary>
				<parameter name="event"/>
			</function>
			<function line="465" name="logEvent">
				<summary>function UIElement:logEvent(event)&#13;&#10;just for printing log. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="470" name="repaint">
				<summary>function UIElement:repaint()&#13;&#10;force repaint in the next frame.
				</summary>
			</function>
			<function line="480" name="update">
				<summary>function UIElement:update()&#13;&#10;Updates the widget unless updates are disabled or the widget is hidden.&#13;&#10;This function does not cause an immediate repaint; instead it schedules a paint event for processing &#13;&#10;when system returns to the main event loop. This permits us to optimize for more speed and less &#13;&#10;flicker than a call to repaint() does. Calling update() several times normally results in just one paintEvent() call.
				</summary>
			</function>
			<function line="493" name="isActiveWindow">
				<summary>function UIElement:isActiveWindow()&#13;&#10;
				</summary>
			</function>
			<function line="497" name="focusPolicy">
				<summary>function UIElement:focusPolicy()&#13;&#10;
				</summary>
			</function>
			<function line="501" name="setFocusPolicy">
				<summary>function UIElement:setFocusPolicy(policy)&#13;&#10;
				</summary>
				<parameter name="policy"/>
			</function>
			<function line="511" name="focusWidget">
				<summary>function UIElement:focusWidget()&#13;&#10;Returns the last child of this widget that setFocus had been&#13;&#10;called on. &#32;For top level widgets this is the widget that will get&#13;&#10;focus in case this window gets activated
				</summary>
			</function>
			<function line="515" name="setFocus_sys">
				<summary>function UIElement:setFocus_sys()&#13;&#10;
				</summary>
			</function>
			<function line="523" name="hasFocus">
				<summary>function UIElement:hasFocus()&#13;&#10;whether this widget has the keyboard input focus&#13;&#10;By default, this property is false.
				</summary>
			</function>
			<function line="529" name="setFocus">
				<summary>function UIElement:setFocus(reason)&#13;&#10;set key focus to the UIElement.&#13;&#10; &#32; @param reason: nil
				</summary>
				<parameter name="reason">nil
				</parameter>
			</function>
			<function line="546" name="updateFocusChild">
				<summary>function UIElement:updateFocusChild()&#13;&#10;updates focus_child on parent widgets to point into this widget
				</summary>
			</function>
			<function line="569" name="clearFocus">
				<summary>function UIElement:clearFocus()&#13;&#10;
				</summary>
			</function>
			<function line="583" name="Update">
				<summary>function UIElement:Update()&#13;&#10;Updates the widget unless updates are disabled or the widget is hidden.&#13;&#10;This function does not cause an immediate repaint; instead it schedules a paint in the next frame.
				</summary>
			</function>
			<function line="590" name="GetStyle">
				<summary>function UIElement:GetStyle()&#13;&#10;get the style object
				</summary>
			</function>
			<function line="596" name="updatesEnabled">
				<summary>function UIElement:updatesEnabled()&#13;&#10;we can temporarily disable updates for complex UI element and render them at lower frame rate. 
				</summary>
			</function>
			<function line="601" name="Render">
				<summary>function UIElement:Render(painterContext)&#13;&#10;render the widget and all its child objects to the current device context. 
				</summary>
				<parameter name="painterContext"/>
			</function>
			<function line="613" name="prepareToRender">
				<summary>function UIElement:prepareToRender()&#13;&#10;
				</summary>
			</function>
			<function line="624" name="applyRenderTransform">
				<summary>function UIElement:applyRenderTransform(painterContext, transform)&#13;&#10;
				</summary>
				<parameter name="painterContext"/>
				<parameter name="transform"/>
			</function>
			<function line="645" name="drawWidget">
				<summary>function UIElement:drawWidget(painterContext, offset)&#13;&#10;draw with offset and its child recursively&#13;&#10; &#32; @param offset: Point of offset. 
				</summary>
				<parameter name="painterContext"/>
				<parameter name="offset">Point of offset. 
				</parameter>
			</function>
			<function line="693" name="paintEvent">
				<summary>function UIElement:paintEvent(painter)&#13;&#10;virtual: render everything here&#13;&#10; &#32; @param painter: painterContext
				</summary>
				<parameter name="painter">painterContext
				</parameter>
			</function>
			<function line="699" name="setMouseTracking">
				<summary>function UIElement:setMouseTracking(enable)&#13;&#10;
				</summary>
				<parameter name="enable"/>
			</function>
			<function line="703" name="hasMouseTracking">
				<summary>function UIElement:hasMouseTracking()&#13;&#10;
				</summary>
			</function>
			<function line="708" name="mousePressEvent">
				<summary>function UIElement:mousePressEvent(mouse_event)&#13;&#10;virtual: 
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="715" name="mouseMoveEvent">
				<summary>function UIElement:mouseMoveEvent(mouse_event)&#13;&#10;virtual: &#13;&#10;If mouse tracking is switched off, mouse move events only occur if&#13;&#10;a mouse button is pressed while the mouse is being moved. If mouse&#13;&#10;tracking is switched on, mouse move events occur even if no mouse button is pressed.
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="719" name="mouseReleaseEvent">
				<summary>function UIElement:mouseReleaseEvent(mouse_event)&#13;&#10;virtual: 
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="722" name="mouseWheelEvent">
				<summary>function UIElement:mouseWheelEvent(mouse_event)&#13;&#10;virtual: &#13;&#10;virtual: 
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="725" name="keyPressEvent">
				<summary>function UIElement:keyPressEvent(key_event)&#13;&#10;virtual: &#13;&#10;virtual: &#13;&#10;virtual: 
				</summary>
				<parameter name="key_event"/>
			</function>
			<function line="728" name="keyReleaseEvent">
				<summary>function UIElement:keyReleaseEvent(key_event)&#13;&#10;virtual: &#13;&#10;virtual: &#13;&#10;virtual: &#13;&#10;virtual: 
				</summary>
				<parameter name="key_event"/>
			</function>
			<function line="732" name="mouseEnterEvent">
				<summary>function UIElement:mouseEnterEvent(event)&#13;&#10;virtual: An event is sent to the widget when the mouse cursor enters the widget.
				</summary>
				<parameter name="event"/>
			</function>
			<function line="736" name="mouseLeaveEvent">
				<summary>function UIElement:mouseLeaveEvent(event)&#13;&#10;virtual: A leave event is sent to the widget when the mouse cursor leaves the widget.
				</summary>
				<parameter name="event"/>
			</function>
			<function line="740" name="focusInEvent">
				<summary>function UIElement:focusInEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="747" name="focusOutEvent">
				<summary>function UIElement:focusOutEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="755" name="childAt">
				<summary>function UIElement:childAt(point)&#13;&#10;&#13;&#10; &#32; @param p: &#13;&#10;Returns the visible child object at the position x, y in the local coordinate system, or nil if no visible child.
				</summary>
				<parameter name="point"/>
			</function>
			<function line="759" name="childAt_helper">
				<summary>function UIElement:childAt_helper(point)&#13;&#10;
				</summary>
				<parameter name="point"/>
			</function>
			<function line="769" name="childAtRecursiveHelper">
				<summary>function UIElement:childAtRecursiveHelper(p)&#13;&#10;private:&#13;&#10; &#32; @param p: point in local coordinate system. 
				</summary>
				<parameter name="p">point in local coordinate system. 
				</parameter>
			</function>
			<function line="796" name="pointInsideRectAndMask">
				<summary>function UIElement:pointInsideRectAndMask(p)&#13;&#10;
				</summary>
				<parameter name="p"/>
			</function>
			<function line="808" name="setAttribute">
				<summary>function UIElement:setAttribute(name, bEnabled)&#13;&#10;&#13;&#10; &#32; @param bEnabled: if nil, it is true.
				</summary>
				<parameter name="name"/>
				<parameter name="bEnabled">if nil, it is true.
				</parameter>
			</function>
			<function line="817" name="testAttribute">
				<summary>function UIElement:testAttribute(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="822" name="setGeometry">
				<summary>function UIElement:setGeometry(ax, ay, aw, ah)&#13;&#10;set the rect
				</summary>
				<parameter name="ax"/>
				<parameter name="ay"/>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="830" name="setRect">
				<summary>function UIElement:setRect(ax, ay, aw, ah)&#13;&#10;
				</summary>
				<parameter name="ax"/>
				<parameter name="ay"/>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="839" name="move">
				<summary>function UIElement:move(x, y)&#13;&#10;move to a given position&#13;&#10;if the widget is a window, the position is that of the widget on the desktop&#13;&#10;Calling move() or setGeometry() inside moveEvent() can lead to infinite recursion
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="848" name="resize">
				<summary>function UIElement:resize(aw, ah)&#13;&#10;set size
				</summary>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="860" name="SetPendingSizeEvent">
				<summary>function UIElement:SetPendingSizeEvent()&#13;&#10;
				</summary>
			</function>
			<function line="869" name="reposition">
				<summary>function UIElement:reposition(ax, ay)&#13;&#10;
				</summary>
				<parameter name="ax"/>
				<parameter name="ay"/>
			</function>
			<function line="885" name="rect">
				<summary>function UIElement:rect()&#13;&#10;client rect. left, top is always 0,0.&#13;&#10; &#32; @note: the returned rect is temporary, do not keep for long. 
				</summary>
			</function>
			<function line="890" name="pos">
				<summary>function UIElement:pos()&#13;&#10;return left top point
				</summary>
			</function>
			<function line="895" name="geometry">
				<summary>function UIElement:geometry()&#13;&#10;left, top is relative to its parent. 
				</summary>
			</function>
			<function line="899" name="width">
				<summary>function UIElement:width()&#13;&#10;
				</summary>
			</function>
			<function line="903" name="height">
				<summary>function UIElement:height()&#13;&#10;
				</summary>
			</function>
			<function line="908" name="x">
				<summary>function UIElement:x()&#13;&#10;the x coordinate relative to its parent
				</summary>
			</function>
			<function line="913" name="y">
				<summary>function UIElement:y()&#13;&#10;the y coordinate relative to its parent
				</summary>
			</function>
			<function line="917" name="setWidth">
				<summary>function UIElement:setWidth(w)&#13;&#10;
				</summary>
				<parameter name="w"/>
			</function>
			<function line="921" name="setHeight">
				<summary>function UIElement:setHeight(h)&#13;&#10;
				</summary>
				<parameter name="h"/>
			</function>
			<function line="925" name="setX">
				<summary>function UIElement:setX(x)&#13;&#10;
				</summary>
				<parameter name="x"/>
			</function>
			<function line="930" name="setY">
				<summary>function UIElement:setY(y)&#13;&#10;
				</summary>
				<parameter name="y"/>
			</function>
			<function line="936" name="IsMouseCaptured">
				<summary>function UIElement:IsMouseCaptured()&#13;&#10;if the mouse is captured to this element or not.
				</summary>
			</function>
			<function line="941" name="CaptureMouse">
				<summary>function UIElement:CaptureMouse()&#13;&#10;Captures the mouse to this element.
				</summary>
			</function>
			<function line="954" name="ReleaseMouseCapture">
				<summary>function UIElement:ReleaseMouseCapture()&#13;&#10;Releases the mouse capture.
				</summary>
			</function>
			<function line="964" name="sendSizeEvents">
				<summary>function UIElement:sendSizeEvents()&#13;&#10;
				</summary>
			</function>
			<function line="977" name="sendPendingSizeEvents">
				<summary>function UIElement:sendPendingSizeEvents(recursive, disableUpdates)&#13;&#10;
				</summary>
				<parameter name="recursive"/>
				<parameter name="disableUpdates"/>
			</function>
			<function line="1007" name="updateGeometry">
				<summary>function UIElement:updateGeometry()&#13;&#10;Notifies the layout system that this widget has changed and may need to change geometry.
				</summary>
			</function>
			<function line="1013" name="GetLayout">
				<summary>function UIElement:GetLayout()&#13;&#10;Returns the layout manager that is installed on this widget, or nil if no layout manager is installed.&#13;&#10;The layout manager sets the geometry of the widget's children that have been added to the layout.
				</summary>
			</function>
			<function line="1019" name="SetLayout">
				<summary>function UIElement:SetLayout(layout)&#13;&#10;Sets the layout manager for this widget to a layout.&#13;&#10;An alternative to calling this function is to pass this widget to the layout's init function.
				</summary>
				<parameter name="layout"/>
			</function>
			<function line="1026" name="updateGeometry_helper">
				<summary>function UIElement:updateGeometry_helper(forceUpdate)&#13;&#10;
				</summary>
				<parameter name="forceUpdate"/>
			</function>
			<function line="1041" name="underMouse">
				<summary>function UIElement:underMouse()&#13;&#10;
				</summary>
			</function>
			<function line="1045" name="GetAbsPosition">
				<summary>function UIElement:GetAbsPosition()&#13;&#10;
				</summary>
			</function>
			<function line="1053" name="mapToGlobal">
				<summary>function UIElement:mapToGlobal(pos)&#13;&#10;convert to global position&#13;&#10; &#32; @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="1070" name="mapFromGlobal">
				<summary>function UIElement:mapFromGlobal(pos)&#13;&#10;convert from global to local pos.&#13;&#10; &#32; @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="1100" name="mapToParent">
				<summary>function UIElement:mapToParent(pos)&#13;&#10;Translates the widget coordinate \a pos to a coordinate in the parent widget.&#13;&#10;Same as mapToGlobal() if the widget has no parent.
				</summary>
				<parameter name="pos"/>
			</function>
			<function line="1108" name="mapFromParent">
				<summary>function UIElement:mapFromParent(pos)&#13;&#10;Translates the parent widget coordinate \a pos to widget coordinates.&#13;&#10;Same as mapFromGlobal() if the widget has no parent.
				</summary>
				<parameter name="pos"/>
			</function>
			<function line="1116" name="mapTo">
				<summary>function UIElement:mapTo(parent, pos) &#13;&#10;Translates the widget coordinate \a pos to the coordinate system&#13;&#10;of \a parent. The \a parent must not be nil and must be a parent of the calling widget.
				</summary>
				<parameter name="parent"/>
				<parameter name="pos"/>
			</function>
			<function line="1131" name="mapFrom">
				<summary>function UIElement:mapFrom(parent, pos) &#13;&#10;Translates the widget coordinate \a pos from the coordinate system&#13;&#10;of \a parent to this widget's coordinate system. The \a parent&#13;&#10;must not be nil and must be a parent of the calling widget.
				</summary>
				<parameter name="parent"/>
				<parameter name="pos"/>
			</function>
			<function line="1143" name="topLevelWidget">
				<summary>function UIElement:topLevelWidget()&#13;&#10;
				</summary>
			</function>
			<function line="1148" name="LoadComponent">
				<summary>function UIElement:LoadComponent(url)&#13;&#10;&#13;&#10; &#32; @return mcml page object if valid
				</summary>
				<parameter name="url"/>
				<returns>return page object if valid
				</returns>
			</function>
			<function line="1152" name="GetTooltip">
				<summary>function UIElement:GetTooltip()&#13;&#10;
				</summary>
			</function>
			<function line="1159" name="SetTooltip">
				<summary>function UIElement:SetTooltip(tooltip)&#13;&#10;If you want to control a tooltip's behavior, you can intercept the&#13;&#10;event() function and catch the Event::ToolTip event (e.g., if you&#13;&#10;want to customize the area for which the tooltip should be shown).
				</summary>
				<parameter name="tooltip"/>
			</function>
			<function line="1163" name="toolTipEvent">
				<summary>function UIElement:toolTipEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="1176" name="PageElement">
				<summary>function UIElement:PageElement()&#13;&#10;
				</summary>
			</function>
			<function line="1180" name="setPageElement">
				<summary>function UIElement:setPageElement(page_elem)&#13;&#10;
				</summary>
				<parameter name="page_elem"/>
			</function>
			<function line="1184" name="emitPositionChanged">
				<summary>function UIElement:emitPositionChanged()&#13;&#10;
				</summary>
			</function>
			<function line="1188" name="emitSizeChanged">
				<summary>function UIElement:emitSizeChanged()&#13;&#10;
				</summary>
			</function>
			<function line="1192" name="needClipping">
				<summary>function UIElement:needClipping()&#13;&#10;
				</summary>
			</function>
			<function line="1205" name="setClipRegion">
				<summary>function UIElement:setClipRegion(painter)&#13;&#10;
				</summary>
				<parameter name="painter"/>
			</function>
			<function line="1213" name="resetClipRegion">
				<summary>function UIElement:resetClipRegion(painter)&#13;&#10;
				</summary>
				<parameter name="painter"/>
			</function>
			<function line="1219" name="ParentClipRegion">
				<summary>function UIElement:ParentClipRegion()&#13;&#10;
				</summary>
			</function>
			<function line="1231" name="ClipRegion">
				<summary>function UIElement:ClipRegion()&#13;&#10;clip region. 
				</summary>
			</function>
			<function line="1239" name="PageElementClipRegion">
				<summary>function UIElement:PageElementClipRegion()&#13;&#10;
				</summary>
			</function>
			<function line="1245" name="IsInputMethodEnabled">
				<summary>function UIElement:IsInputMethodEnabled()&#13;&#10;
				</summary>
			</function>
			<function line="1249" name="SetInputMethodEnabled">
				<summary>function UIElement:SetInputMethodEnabled(enabled)&#13;&#10;
				</summary>
				<parameter name="enabled"/>
			</function>
		</table>
		<table name="Keyboard" src="script/ide/System/Windows/Keyboard.lua">
			<function line="21" name="ctor">
				<summary>function Keyboard:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="25" name="GetEmulatedKeys">
				<summary>function Keyboard:GetEmulatedKeys()&#13;&#10;&#13;&#10; &#32; @return emulatedKeys: {alt_pressed=nil, ctrl_pressed, shift_pressed}
				</summary>
				<returns>return {alt_pressed=nil, ctrl_pressed, shift_pressed}
				</returns>
			</function>
			<function line="29" name="IsAltKeyPressed">
				<summary>function Keyboard:IsAltKeyPressed()&#13;&#10;
				</summary>
			</function>
			<function line="33" name="IsCtrlKeyPressed">
				<summary>function Keyboard:IsCtrlKeyPressed()&#13;&#10;
				</summary>
			</function>
			<function line="37" name="IsShiftKeyPressed">
				<summary>function Keyboard:IsShiftKeyPressed()&#13;&#10;
				</summary>
			</function>
			<function line="44" name="SendKeyEvent">
				<summary>function Keyboard:SendKeyEvent(event_type, vKey)&#13;&#10;send a simulated raw key event to paraengine.&#13;&#10; &#32; @param event_type: "keyDownEvent", "keyUpEvent"&#13;&#10; &#32; @param vKey: virtual key like DIK_SPACE
				</summary>
				<parameter name="event_type">"keyDownEvent", "keyUpEvent"
				</parameter>
				<parameter name="vKey">virtual key like DIK_SPACE
				</parameter>
			</function>
			<function line="55" name="EnableIME">
				<summary>function Keyboard:EnableIME(bEnabled)&#13;&#10;whether to enable system IME for all edit box control. &#13;&#10;sometimes, we will prefer virtual keyboard in NPL, instead of system IME. 
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="59" name="attachWithIME">
				<summary>function Keyboard:attachWithIME(ctrlBottom, curText, SelStart, SelEnd)&#13;&#10;
				</summary>
				<parameter name="ctrlBottom"/>
				<parameter name="curText"/>
				<parameter name="SelStart"/>
				<parameter name="SelEnd"/>
			</function>
			<function line="70" name="detachWithIME">
				<summary>function Keyboard:detachWithIME(ctrlBottom)	&#13;&#10;
				</summary>
				<parameter name="ctrlBottom"/>
			</function>
			<function line="85" name="SendInputMethodEvent">
				<summary>function Keyboard:SendInputMethodEvent(str)&#13;&#10;emulate the IME 
				</summary>
				<parameter name="str"/>
			</function>
			<function line="92" name="HasKeyFocus">
				<summary>function Keyboard:HasKeyFocus()&#13;&#10;whether any of the UI has key focus
				</summary>
			</function>
			<function line="97" name="GetKeyFocus">
				<summary>function Keyboard:GetKeyFocus()&#13;&#10;return the ParaUIObject that is currently have key focus or nil. 
				</summary>
			</function>
		</table>
		<table name="Mouse" src="script/ide/System/Windows/Mouse.lua">
			<function line="24" name="ctor">
				<summary>function Mouse:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="28" name="GetCapture">
				<summary>function Mouse:GetCapture()&#13;&#10;Gets the element that has captured the mouse. 
				</summary>
			</function>
			<function line="35" name="Capture">
				<summary>function Mouse:Capture(element)&#13;&#10;When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.&#13;&#10;To release mouse capture, call Capture passing nil as the element to capture.&#13;&#10; &#32; @param element: if nil, it means release mouse capture. 
				</summary>
				<parameter name="element">if nil, it means release mouse capture. 
				</parameter>
			</function>
			<function line="40" name="LeftButton">
				<summary>function Mouse:LeftButton()&#13;&#10;Gets the state of the left button of the mouse. true if pressed. 
				</summary>
			</function>
			<function line="45" name="RightButton">
				<summary>function Mouse:RightButton()&#13;&#10;Gets the state of the right button of the mouse. true if pressed. 
				</summary>
			</function>
			<function line="50" name="DirectlyOver">
				<summary>function Mouse:DirectlyOver()&#13;&#10;Gets the element the mouse pointer is directly over.
				</summary>
			</function>
			<function line="55" name="pos">
				<summary>function Mouse:pos()&#13;&#10;get Point object. 
				</summary>
			</function>
			<function line="61" name="GetMousePosition">
				<summary>function Mouse:GetMousePosition()&#13;&#10;return x, y in GUI screen coordinate
				</summary>
			</function>
			<function line="66" name="IsMouseButtonSwapped">
				<summary>function Mouse:IsMouseButtonSwapped()&#13;&#10;return true if left/right mouse button should be swapped. 
				</summary>
			</function>
			<function line="71" name="SetMouseButtonSwapped">
				<summary>function Mouse:SetMouseButtonSwapped(bSwapped)&#13;&#10;set if left/right mouse button should be swapped. 
				</summary>
				<parameter name="bSwapped"/>
			</function>
			<function line="76" name="IsTouchButtonSwapped">
				<summary>function Mouse:IsTouchButtonSwapped()&#13;&#10;if false, the left touch is left mouse button.
				</summary>
			</function>
			<function line="81" name="SetTouchButtonSwapped">
				<summary>function Mouse:SetTouchButtonSwapped(bSwapped)&#13;&#10;if false, the left touch is left mouse button.
				</summary>
				<parameter name="bSwapped"/>
			</function>
			<function line="88" name="SetCursorFromFile">
				<summary>function Mouse:SetCursorFromFile(filename, offsetX, offsetY)&#13;&#10;set root cursor file&#13;&#10; &#32; @param filename: this needs to be a tga file&#13;&#10; &#32; @param offsetX, offsetY: default to 0, 0
				</summary>
				<parameter name="filename">this needs to be a tga file
				</parameter>
				<parameter name="offsetX">, offsetY: default to 0, 0
				</parameter>
				<parameter name="offsetY"/>
			</function>
		</table>
		<table name="BufferPicking" src="script/ide/System/Scene/BufferPicking.lua">
			<function line="65" name="ctor">
				<summary>function BufferPicking:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="69" name="CreatePickingBuffer_sys">
				<summary>function BufferPicking:CreatePickingBuffer_sys()&#13;&#10;
				</summary>
			</function>
			<function line="89" name="IsBackBuffer">
				<summary>function BufferPicking:IsBackBuffer()&#13;&#10;backbuffer is a special buffer, which is what actually on screen. 
				</summary>
			</function>
			<function line="95" name="IsOverlay">
				<summary>function BufferPicking:IsOverlay()&#13;&#10;overlay is a special buffer, which is an additional render pass for objects on top of 3d scene. 
				</summary>
			</function>
			<function line="104" name="GetRenderOrigin">
				<summary>function BufferPicking:GetRenderOrigin()&#13;&#10;World position has double precision which is usually far away from the camera origin. &#13;&#10;When rendering 3d objects, object's world position must subtract this vector, &#13;&#10;so that all objects are close to camera before we do any matrix4 transforms.&#13;&#10; &#32; @return vector3 of render origin
				</summary>
				<returns>return of render origin
				</returns>
			</function>
			<function line="109" name="handleRender">
				<summary>function BufferPicking:handleRender()&#13;&#10;private: handle system On_Paint message.
				</summary>
			</function>
			<function line="122" name="paintEvent">
				<summary>function BufferPicking:paintEvent(painter)&#13;&#10;virtual function: draw something here to be painted into the picking buffer. &#13;&#10;only called when buffer is manually set to dirty with SetDirty() and Pick() function is called. &#13;&#10;When rendering world objects in paintEvent, ensure that they are substracted by GetRenderOrigin() vector. 
				</summary>
				<parameter name="painter"/>
			</function>
			<function line="127" name="IsPickingPass">
				<summary>function BufferPicking:IsPickingPass()&#13;&#10;if we are currently rendering picking
				</summary>
			</function>
			<function line="133" name="SetName">
				<summary>function BufferPicking:SetName(name)&#13;&#10;set name of the picking buffer
				</summary>
				<parameter name="name"/>
			</function>
			<function line="149" name="Pick">
				<summary>function BufferPicking:Pick(x, y, width, height, nViewportId)&#13;&#10;pick by a point in the viewport. &#13;&#10;Tip: to pick a thin line, one may consider picking by a small rect region.&#13;&#10; &#32; @param x, y: if nil, it is the current mouse position.&#13;&#10; &#32; @param width, height: if nil, 1,1&#13;&#10; &#32; @param nViewportId: viewport index, if -1 it means the current viewport.&#13;&#10; &#32; @return array of picking result. if nil means nothing is picked.
				</summary>
				<parameter name="x">, y: if nil, it is the current mouse position.
				</parameter>
				<parameter name="y"/>
				<parameter name="width">, height: if nil, 1,1
				</parameter>
				<parameter name="height"/>
				<parameter name="nViewportId">viewport index, if -1 it means the current viewport.
				</parameter>
				<returns>return of picking result. if nil means nothing is picked.
				</returns>
			</function>
			<function line="167" name="GetPickingResult">
				<summary>function BufferPicking:GetPickingResult()&#13;&#10;return array, size: &#32;an array of unique picking id in the last pick call. it may return nil if nothing is picked&#13;&#10;array start from index 0.
				</summary>
			</function>
			<function line="189" name="GetPickingCount">
				<summary>function BufferPicking:GetPickingCount()&#13;&#10;return the number of objects picked. 
				</summary>
			</function>
			<function line="195" name="GetPickingID">
				<summary>function BufferPicking:GetPickingID(nIndex)&#13;&#10;get the picked item id of the given picking item. if no data at the index return 0.&#13;&#10; &#32; @param nIndex: if -1, it will use m_currentPickIndex;
				</summary>
				<parameter name="nIndex">if -1, it will use m_currentPickIndex;
				</parameter>
			</function>
			<function line="203" name="ClearPickingResult">
				<summary>function BufferPicking:ClearPickingResult()&#13;&#10;clear last picking result 
				</summary>
			</function>
			<function line="207" name="SetPickLeftTop">
				<summary>function BufferPicking:SetPickLeftTop(x, y)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="212" name="GetPickLeftTop">
				<summary>function BufferPicking:GetPickLeftTop()&#13;&#10;
				</summary>
			</function>
			<function line="217" name="SetPickWidthHeight">
				<summary>function BufferPicking:SetPickWidthHeight(w,h)&#13;&#10;
				</summary>
				<parameter name="w"/>
				<parameter name="h"/>
			</function>
			<function line="222" name="GetPickWidthHeight">
				<summary>function BufferPicking:GetPickWidthHeight()&#13;&#10;
				</summary>
			</function>
			<function line="227" name="GetPickIndex">
				<summary>function BufferPicking:GetPickIndex()&#13;&#10;
				</summary>
			</function>
			<function line="230" name="SetPickIndex">
				<summary>function BufferPicking:SetPickIndex(nIndex)&#13;&#10;
				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="236" name="IsResultDirty">
				<summary>function BufferPicking:IsResultDirty()&#13;&#10;
				</summary>
			</function>
			<function line="240" name="SetResultDirty">
				<summary>function BufferPicking:SetResultDirty(bDirty)&#13;&#10;
				</summary>
				<parameter name="bDirty"/>
			</function>
			<function line="245" name="IsDirty">
				<summary>function BufferPicking:IsDirty()&#13;&#10;if content is dirty
				</summary>
			</function>
			<function line="253" name="SetDirty">
				<summary>function BufferPicking:SetDirty(bDirty)&#13;&#10;if content is dirty, next pick event will repaint and buffer using paintEvent&#13;&#10;this is only valid when buffer name is not backbuffer or overlay
				</summary>
				<parameter name="bDirty"/>
			</function>
			<function line="260" name="GetViewport">
				<summary>function BufferPicking:GetViewport()&#13;&#10;in which viewport to pick. default to -1, which is the default one. 
				</summary>
			</function>
			<function line="265" name="SetViewport">
				<summary>function BufferPicking:SetViewport(nViewportIndex)&#13;&#10;in which viewport to pick. if -1, it is the default one. 
				</summary>
				<parameter name="nViewportIndex"/>
			</function>
			<function line="272" name="GetRenderTarget">
				<summary>function BufferPicking:GetRenderTarget()&#13;&#10;get the rendertarget ParaObject
				</summary>
			</function>
			<function line="279" name="SetColorAndName">
				<summary>function BufferPicking:SetColorAndName(painter, color, pickingColor)&#13;&#10;helper function that set color and picking color(name)&#13;&#10; &#32; @param color: color used for normal rendering&#13;&#10; &#32; @param pickingColor: color used drawing picking pass. if nil, it is the same as the color. if false, it means object is not pickable (we will render it as black). 
				</summary>
				<parameter name="painter"/>
				<parameter name="color">color used for normal rendering
				</parameter>
				<parameter name="pickingColor">color used drawing picking pass. if nil, it is the same as the color. if false, it means object is not pickable (we will render it as black). 
				</parameter>
			</function>
			<function line="301" name="DebugShow">
				<summary>function BufferPicking:DebugShow(alignment, left, top, width, height)&#13;&#10;show the buffer on GUI for debugging purposes&#13;&#10;e.g. self:DebugShow("_lt", 10, 10, 128, 128)&#13;&#10; &#32; @param alignment: default to "_lt" left top.&#13;&#10; &#32; @param left, top, width, height:
				</summary>
				<parameter name="alignment">default to "_lt" left top.
				</parameter>
				<parameter name="left">, top, width, height:
				</parameter>
				<parameter name="top"/>
				<parameter name="width"/>
				<parameter name="height"/>
			</function>
		</table>
		<table name="OverlayPicking" src="script/ide/System/Scene/Overlays/OverlayPicking.lua">
			<function line="25" name="ctor">
				<summary>function OverlayPicking:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="29" name="CreatePickingBuffer_sys">
				<summary>function OverlayPicking:CreatePickingBuffer_sys()&#13;&#10;
				</summary>
			</function>
			<function line="33" name="ResetPickingName">
				<summary>function OverlayPicking:ResetPickingName()&#13;&#10;
				</summary>
			</function>
			<function line="38" name="GetPickingCount">
				<summary>function OverlayPicking:GetPickingCount()&#13;&#10;
				</summary>
			</function>
			<function line="47" name="GetPickingFrameNumber">
				<summary>function OverlayPicking:GetPickingFrameNumber()&#13;&#10;this number is increased by 1 everytime picking buffer is redrawn, &#13;&#10;this is useful to decide if a pickingName is valid or associated with the current picking frame number
				</summary>
			</function>
			<function line="54" name="GetPickingResult">
				<summary>function OverlayPicking:GetPickingResult()&#13;&#10;
				</summary>
			</function>
			<function line="111" name="GetNextPickingName">
				<summary>function OverlayPicking:GetNextPickingName()&#13;&#10;find next color int value that should be used for the picking color for next unique pickable item.
				</summary>
			</function>
			<function line="117" name="GetActivePickingName">
				<summary>function OverlayPicking:GetActivePickingName()&#13;&#10;picking name from the last picking result.
				</summary>
			</function>
			<function line="123" name="SetActivePickingName">
				<summary>function OverlayPicking:SetActivePickingName(name)&#13;&#10;usually called automatically. remove the alpha channel.&#13;&#10;set the name of last picking result.
				</summary>
				<parameter name="name"/>
			</function>
		</table>
		<table name="ShapesDrawer" src="script/ide/System/Scene/Overlays/ShapesDrawer.lua">
			<function line="587" name="DrawArrowHead">
				<summary>function ShapesDrawer.DrawArrowHead(painter, cx,cy,cz, axis, radius, length, segment)&#13;&#10;draw arrow head 
				</summary>
				<parameter name="painter"/>
				<parameter name="cx"/>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="axis"/>
				<parameter name="radius"/>
				<parameter name="length"/>
				<parameter name="segment"/>
			</function>
			<function line="603" name="DrawRect2DBorder">
				<summary>function ShapesDrawer.DrawRect2DBorder(painter, x, y, width, height, zValue)&#13;&#10;
				</summary>
				<parameter name="painter"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<parameter name="zValue"/>
			</function>
		</table>
		<table name="AutoCamera" src="script/ide/System/Scene/Cameras/AutoCamera.lua">
			<function line="27" name="ctor">
				<summary>function AutoCamera:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="48" name="EnableCameraFrameMove">
				<summary>function AutoCamera:EnableCameraFrameMove(bEnable)&#13;&#10;this function must be called in order for "beforeRenderFrameMoved" events to fire. 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="87" name="OnBeforeRenderFrameMove">
				<summary>function AutoCamera:OnBeforeRenderFrameMove()&#13;&#10;
				</summary>
			</function>
			<function line="99" name="ScheduleCameraMove">
				<summary>function AutoCamera:ScheduleCameraMove(callbackFunc)&#13;&#10;call callbackFunc in the next frame move before scene rendering. 
				</summary>
				<parameter name="callbackFunc"/>
			</function>
			<function line="105" name="GetViewProjMatrix">
				<summary>function AutoCamera:GetViewProjMatrix()&#13;&#10;
				</summary>
			</function>
			<function line="109" name="GetViewMatrix">
				<summary>function AutoCamera:GetViewMatrix()&#13;&#10;
				</summary>
			</function>
			<function line="113" name="GetProjMatrix">
				<summary>function AutoCamera:GetProjMatrix()&#13;&#10;
				</summary>
			</function>
			<function line="118" name="GetEyePosition">
				<summary>function AutoCamera:GetEyePosition()&#13;&#10;
				</summary>
			</function>
			<function line="122" name="GetRenderOrigin">
				<summary>function AutoCamera:GetRenderOrigin()&#13;&#10;
				</summary>
			</function>
			<function line="131" name="GetFieldOfView">
				<summary>function AutoCamera:GetFieldOfView()&#13;&#10;
				</summary>
			</function>
			<function line="135" name="GetNearPlane">
				<summary>function AutoCamera:GetNearPlane()&#13;&#10;
				</summary>
			</function>
			<function line="139" name="GetFarPlane">
				<summary>function AutoCamera:GetFarPlane()&#13;&#10;
				</summary>
			</function>
			<function line="143" name="GetAspectRatio">
				<summary>function AutoCamera:GetAspectRatio()&#13;&#10;
				</summary>
			</function>
			<function line="148" name="UpdateMouseDelta">
				<summary>function AutoCamera:UpdateMouseDelta(nDX, nDY)&#13;&#10;
				</summary>
				<parameter name="nDX"/>
				<parameter name="nDY"/>
			</function>
			<function line="174" name="handleMouseEvent">
				<summary>function AutoCamera:handleMouseEvent(event)&#13;&#10;this function should be called for all mouse event if one wants to handle camera control by script. &#13;&#10;so that we can emulate mouse dragging by script. One also needs to call FrameMoveCameraControl() for this to take effect. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="231" name="GetTouchSession">
				<summary>function AutoCamera:GetTouchSession()&#13;&#10;get the touch session that is dragging the view
				</summary>
			</function>
			<function line="235" name="IsDragging">
				<summary>function AutoCamera:IsDragging()&#13;&#10;
				</summary>
			</function>
			<function line="244" name="FrameMoveCameraControl">
				<summary>function AutoCamera:FrameMoveCameraControl()&#13;&#10;this function should be called at 60FPS if one wants to handle camera control by script. &#13;&#10;one also needs to call handleMouseEvent() for this to take effect. 
				</summary>
			</function>
		</table>
		<table name="Cameras" src="script/ide/System/Scene/Cameras/Cameras.lua">
			<function line="19" name="GetCurrent">
				<summary>function Cameras:GetCurrent()&#13;&#10;default to autocamera if no camera is set. 
				</summary>
			</function>
			<function line="23" name="SetCurrent">
				<summary>function Cameras:SetCurrent(cam)&#13;&#10;
				</summary>
				<parameter name="cam"/>
			</function>
		</table>
		<table name="request" src="script/apps/WebServer/npl_request.lua">
			<function line="45" name="ctor">
				<summary>function request:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="50" name="GetResponse">
				<summary>function request:GetResponse()&#13;&#10;get the response object. 
				</summary>
			</function>
			<function line="55" name="GetNid">
				<summary>function request:GetNid()&#13;&#10;get the nid where the request is from. 
				</summary>
			</function>
			<function line="59" name="errorEvent">
				<summary>function request:errorEvent(msg)&#13;&#10;
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="71" name="tostring">
				<summary>function request:tostring()&#13;&#10;
				</summary>
			</function>
			<function line="76" name="url">
				<summary>function request:url()&#13;&#10;original request url
				</summary>
			</function>
			<function line="80" name="parse_url">
				<summary>function request:parse_url()&#13;&#10;
				</summary>
			</function>
			<function line="92" name="GetMsg">
				<summary>function request:GetMsg()&#13;&#10;headers actually is the raw message containing everything.&#13;&#10;just incase one wants to clone the request and forward it to some other threads or network process. 
				</summary>
			</function>
			<function line="198" name="ParseMultipartData">
				<summary>function request:ParseMultipartData(input, input_type, tab, overwrite)&#13;&#10;&#13;&#10; &#32; @param input: input string&#13;&#10; &#32; @param input_type: the content type containing the boundary text.&#13;&#10; &#32; @param tab: table of key value pairs, if nil a new table is created and returned.&#13;&#10; &#32; @return table of key value pairs
				</summary>
				<parameter name="input">input string
				</parameter>
				<parameter name="input_type">the content type containing the boundary text.
				</parameter>
				<parameter name="tab">table of key value pairs, if nil a new table is created and returned.
				</parameter>
				<parameter name="overwrite"/>
				<returns>return of key value pairs
				</returns>
			</function>
			<function line="209" name="ParsePostData">
				<summary>function request:ParsePostData()&#13;&#10;
				</summary>
			</function>
			<function line="232" name="GetBody">
				<summary>function request:GetBody()&#13;&#10;get the request body. if the body is known datetype, such as "application/json", it may already be converted to table&#13;&#10;One can always get the raw http request body string using self.headers.body. 
				</summary>
			</function>
			<function line="238" name="getparams">
				<summary>function request:getparams()&#13;&#10;get url parameters: both url post/get are supported&#13;&#10;return a table of name, value pairs
				</summary>
			</function>
			<function line="249" name="IsJsonBody">
				<summary>function request:IsJsonBody()&#13;&#10;
				</summary>
			</function>
			<function line="258" name="GetHost">
				<summary>function request:GetHost()&#13;&#10;get host name from header. usually checking for the http origin for cross-domain request or not. 
				</summary>
			</function>
			<function line="263" name="GetMethod">
				<summary>function request:GetMethod()&#13;&#10;in headers &#32;'GET', 'HEAD', 'POST', 'PUT', 'OPTIONS' etc
				</summary>
			</function>
			<function line="269" name="header">
				<summary>function request:header(name)&#13;&#10;get the value of given header&#13;&#10; &#32; @param name: "method", "Host", or any of other custom header fields
				</summary>
				<parameter name="name">"method", "Host", or any of other custom header fields
				</parameter>
			</function>
			<function line="276" name="get">
				<summary>function request:get(name)&#13;&#10;get a given url get/post param by name&#13;&#10; &#32; @param name: if name is nil or 'json', we will return table object passed in from headers.body (json http post)&#13;&#10;if you post data as json, you can also access json encoded html body directly with key name. 
				</summary>
				<parameter name="name">if name is nil or 'json', we will return table object passed in from headers.body (json http post)&#13;&#10;if you post data as json, you can also access json encoded html body directly with key name. 
				</parameter>
			</function>
			<function line="288" name="getpeername">
				<summary>function request:getpeername()&#13;&#10;get ip address as string
				</summary>
			</function>
			<function line="295" name="discard">
				<summary>function request:discard()&#13;&#10;drop this request, so that nothing is sent to client at the moment. &#13;&#10;we use this function to delegate a request from one thread to another in npl script handler
				</summary>
			</function>
			<function line="300" name="send">
				<summary>function request:send(address)&#13;&#10;send/route the request to another processor: possibly another npl file in another thread or another machine. 
				</summary>
				<parameter name="address"/>
			</function>
			<function line="309" name="get_cookie">
				<summary>function request:get_cookie(name)&#13;&#10;get cookies or a given cookie entry value by name&#13;&#10; &#32; @param name: if nil, entire cookies table is returned. if string, only cookies value of the given name is returned. 
				</summary>
				<parameter name="name">if nil, entire cookies table is returned. if string, only cookies value of the given name is returned. 
				</parameter>
			</function>
			<function line="331" name="clear_cookie">
				<summary>function request:clear_cookie()&#13;&#10;clear all cookies in case of rpc request, etc. 
				</summary>
			</function>
			<function line="354" name="NormalizeHeaders">
				<summary>function request:NormalizeHeaders(headers)&#13;&#10;from case insensitive to case sensitive. 
				</summary>
				<parameter name="headers"/>
			</function>
			<function line="374" name="init">
				<summary>function request:init(msg)&#13;&#10;request can be reused by calling this function. &#13;&#10;the request object is returned if succeed.
				</summary>
				<parameter name="msg"/>
			</function>
		</table>
		<table name="response" src="script/apps/WebServer/npl_response.lua">
			<function line="60" name="ctor">
				<summary>function response:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="65" name="init">
				<summary>function response:init(req)&#13;&#10;response can be reused by calling this function. 
				</summary>
				<parameter name="req"/>
			</function>
			<function line="75" name="send_xml">
				<summary>function response:send_xml(xml, return_code, headers)&#13;&#10;make a xml rpc response&#13;&#10; &#32; @param xml: xml/html root node or text.&#13;&#10; &#32; @param return_code: nil if default to "ok"(200)
				</summary>
				<parameter name="xml">xml/html root node or text.
				</parameter>
				<parameter name="return_code">nil if default to "ok"(200)
				</parameter>
				<parameter name="headers"/>
			</function>
			<function line="90" name="send_json">
				<summary>function response:send_json(json, return_code, headers)&#13;&#10;make a json response&#13;&#10; &#32; @param return_code: nil if default to "ok"(200)
				</summary>
				<parameter name="json"/>
				<parameter name="return_code">nil if default to "ok"(200)
				</parameter>
				<parameter name="headers"/>
			</function>
			<function line="101" name="SetReturnCode">
				<summary>function response:SetReturnCode(return_code)&#13;&#10;
				</summary>
				<parameter name="return_code"/>
			</function>
			<function line="110" name="nocache_headers">
				<summary>function response:nocache_headers()&#13;&#10;Set the headers to prevent caching for the different browsers.&#13;&#10;Different browsers support different nocache headers, so several&#13;&#10;headers must be sent so that all of them get the point that no&#13;&#10;caching should occur.
				</summary>
			</function>
			<function line="118" name="set_header">
				<summary>function response:set_header(h, v)&#13;&#10;it will replace value
				</summary>
				<parameter name="h"/>
				<parameter name="v"/>
			</function>
			<function line="126" name="add_header">
				<summary>function response:add_header(h, v)&#13;&#10;there can be duplicated names 
				</summary>
				<parameter name="h"/>
				<parameter name="v"/>
			</function>
			<function line="147" name="SetContent">
				<summary>function response:SetContent(text)&#13;&#10;if one calls SetContent instead of send(), any previously buffered send text will be ignored. 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="156" name="send">
				<summary>function response:send(text, bUseEmptyArray)&#13;&#10;send response and finish the request now.&#13;&#10; &#32; @param bUseEmptyArray: by default, empty table is serialized to json as object {}. &#13;&#10;calling this function will be serialized to json as array[]&#13;&#10; &#32; @param pure HTML text or json table
				</summary>
				<parameter name="text"/>
				<parameter name="bUseEmptyArray">by default, empty table is serialized to json as object {}. &#13;&#10;calling this function will be serialized to json as array[]
				</parameter>
			</function>
			<function line="167" name="status">
				<summary>function response:status(code)&#13;&#10;set return code and return response object.
				</summary>
				<parameter name="code"/>
			</function>
			<function line="179" name="sendsome">
				<summary>function response:sendsome(text)&#13;&#10;cache string and send it until finish() is called.&#13;&#10;it is optimized to call sendsome() many times during a single request.&#13;&#10; &#32; @param text: string or a table of text lines. 
				</summary>
				<parameter name="text">string or a table of text lines. 
				</parameter>
			</function>
			<function line="214" name="isContentTypePlainText">
				<summary>function response:isContentTypePlainText(contentType)&#13;&#10;
				</summary>
				<parameter name="contentType"/>
			</function>
			<function line="223" name="send_response">
				<summary>function response:send_response()&#13;&#10;sends prebuilt content to the client&#13;&#10;if possible, sets Content-Length: header field&#13;&#10;uses:&#13;&#10;self.content : content data to send&#13;&#10;sets:&#13;&#10;self.keep_alive : if possible to keep using the same connection
				</summary>
			</function>
			<function line="313" name="send_headers">
				<summary>function response:send_headers()&#13;&#10;sends the response headers directly to client &#13;&#10;uses:&#13;&#10;self.sent_headers : if true, headers are already sent, does nothing&#13;&#10;self.statusline : response status, if nil, sends 200 OK&#13;&#10;self.headers : table of header fields to send
				</summary>
			</function>
			<function line="341" name="send_data">
				<summary>function response:send_data(data)&#13;&#10;sends content directly to client. sends headers first, if not&#13;&#10; &#32; @param data : content data to send
				</summary>
				<parameter name="data">content data to send
				</parameter>
			</function>
			<function line="393" name="set_cookie">
				<summary>function response:set_cookie(name, value)&#13;&#10;&#13;&#10; &#32; @param name: string key&#13;&#10; &#32; @param value: number or string. or a table of like { &#13;&#10;value = "actual value", &#13;&#10;expires = os.time() + 1200, &#13;&#10;path = "/;HttpOnly"&#13;&#10;}&#13;&#10;if one wants to specify expires and path. 
				</summary>
				<parameter name="name">string key
				</parameter>
				<parameter name="value">number or string. or a table of like { &#13;&#10;value = "actual value", &#13;&#10;expires = os.time() + 1200, &#13;&#10;path = "/;HttpOnly"&#13;&#10;}&#13;&#10;if one wants to specify expires and path. 
				</parameter>
			</function>
			<function line="405" name="redirect">
				<summary>function response:redirect(path, status)&#13;&#10;&#13;&#10; &#32; @param status: nil, "moved_temporarily" or "moved_permanently". &#32;
				</summary>
				<parameter name="path"/>
				<parameter name="status">nil, "moved_temporarily" or "moved_permanently". &#32;
				</parameter>
			</function>
			<function line="411" name="delete_cookie">
				<summary>function response:delete_cookie(name, path)&#13;&#10;
				</summary>
				<parameter name="name"/>
				<parameter name="path"/>
			</function>
			<function line="417" name="discard">
				<summary>function response:discard()&#13;&#10;drop this request, so that nothing is sent to client at the moment. &#13;&#10;we use this function to delegate a request from one thread to another in npl script handler
				</summary>
			</function>
			<function line="422" name="SetOnFinished">
				<summary>function response:SetOnFinished(callbackFunc)&#13;&#10;set on finished callback
				</summary>
				<parameter name="callbackFunc"/>
			</function>
			<function line="427" name="SetFinished">
				<summary>function response:SetFinished()&#13;&#10;call this to actually make this request finished. &#32;It will invoke OnFinished callback. 
				</summary>
			</function>
			<function line="437" name="finish">
				<summary>function response:finish()&#13;&#10;call this function to actually send cached response to client.&#13;&#10;this function is automatically called when page handler is finished. &#13;&#10;Please note, calling finish() between Begin() and End() has no effect. 
				</summary>
			</function>
			<function line="447" name="Begin">
				<summary>function response:Begin()&#13;&#10;we will enter asynchronous mode, and the response is sent when self:End() is called. &#13;&#10;Please note, it is up to you, to call End() function. Forgetting doing so, the client will no longer receive any response from current connection. &#13;&#10;For example, in the page handler, we may wait for another async http call, before calling End().
				</summary>
			</function>
			<function line="453" name="End">
				<summary>function response:End(bIgnoreFinish)&#13;&#10;finish and send the asynchronous response.&#13;&#10; &#32; @param bIgnoreFinish: if true, we will not call finish to send the actual response. default to nil.
				</summary>
				<parameter name="bIgnoreFinish">if true, we will not call finish to send the actual response. default to nil.
				</parameter>
			</function>
			<function line="462" name="GetNid">
				<summary>function response:GetNid()&#13;&#10;
				</summary>
			</function>
			<function line="466" name="GetAddress">
				<summary>function response:GetAddress()&#13;&#10;
				</summary>
			</function>
			<function line="474" name="CloseAfterSend">
				<summary>function response:CloseAfterSend()&#13;&#10;
				</summary>
			</function>
			<function line="479" name="sendInternal">
				<summary>function response:sendInternal(text)&#13;&#10;private: 
				</summary>
				<parameter name="text"/>
			</function>
		</table>
		<table name="npl_page_env" src="script/apps/WebServer/npl_page_env.lua">
			<function line="112" name="new">
				<summary>function npl_page_env:new(request, response)&#13;&#10;expose: request, response, echo and print to npl script. 
				</summary>
				<parameter name="request"/>
				<parameter name="response"/>
			</function>
			<function line="130" name="InstallMethods">
				<summary>function npl_page_env.InstallMethods(o)&#13;&#10;
				</summary>
				<parameter name="o"/>
			</function>
			<function line="143" name="push_page">
				<summary>function npl_page_env:push_page(page)&#13;&#10;internal function: never call this in page code
				</summary>
				<parameter name="page"/>
			</function>
			<function line="148" name="pop_page">
				<summary>function npl_page_env:pop_page(page)&#13;&#10;internal function: never call this in page code
				</summary>
				<parameter name="page"/>
			</function>
		</table>
		<table name="env_imp" src="script/apps/WebServer/npl_page_env.lua">
			<function line="154" name="echo">
				<summary>function env_imp:echo(text)&#13;&#10;handy function to output using current request context&#13;&#10; &#32; @param text: string or number or nil or boolean. 
				</summary>
				<parameter name="text">string or number or nil or boolean. 
				</parameter>
			</function>
			<function line="159" name="print">
				<summary>function env_imp:print(...)&#13;&#10;same as self.echo(string.format(...))
				</summary>
			</function>
			<function line="165" name="nplinfo">
				<summary>function env_imp:nplinfo()&#13;&#10;similar to phpinfo()&#13;&#10;output everything about the environment and the request including all request headers.
				</summary>
			</function>
			<function line="177" name="exit">
				<summary>function env_imp:exit(msg)&#13;&#10;similar to php.exit()&#13;&#10;Output a message and terminate the current script&#13;&#10; &#32; @param msg: output this message. usually nil. 
				</summary>
				<parameter name="msg">output this message. usually nil. 
				</parameter>
			</function>
			<function line="191" name="dirname">
				<summary>function env_imp:dirname(filename)&#13;&#10;similar to php.dirname() however with the trailing /&#13;&#10;get the directory name of the given file with the trailing /.&#13;&#10; &#32; @param filename: if nil, self.__FILE__ is used. 
				</summary>
				<parameter name="filename">if nil, self.__FILE__ is used. 
				</parameter>
			</function>
			<function line="203" name="getfilepath">
				<summary>function env_imp:getfilepath(filename)&#13;&#10;&#13;&#10; &#32; @param filename: file path, relative or absolute. &#13;&#10;begin with './', relative to current file&#13;&#10;begin with '/', relative to web root directory&#13;&#10;begin with '../../../', up several directory to current file&#13;&#10;no "/" in filename, relative to current file&#13;&#10;otherwise, filename is absolute path. 
				</summary>
				<parameter name="filename">file path, relative or absolute. &#13;&#10;begin with './', relative to current file&#13;&#10;begin with '/', relative to web root directory&#13;&#10;begin with '../../../', up several directory to current file&#13;&#10;no "/" in filename, relative to current file&#13;&#10;otherwise, filename is absolute path. 
				</parameter>
			</function>
			<function line="236" name="file_exists">
				<summary>function env_imp:file_exists(filename)&#13;&#10;Checks whether a file exists
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="243" name="add_include_file">
				<summary>function env_imp:add_include_file(filename)&#13;&#10;private: add file to be already included
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="256" name="has_include_file">
				<summary>function env_imp:has_include_file(filename)&#13;&#10;private: return true if file is already included in the environment. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="273" name="include">
				<summary>function env_imp:include(filename, bReload)&#13;&#10;similar to php.include: http://php.net/manual/en/function.include.php&#13;&#10;The include statement includes and evaluates the specified file and return its result if any.&#13;&#10;the included file share the same global environment as the caller. Unlike php, if you include another file &#13;&#10;inside a function, upvalues are NOT shared due to the lexical scoping nature of lua. &#13;&#10;Please note that exit() call will fallthrough all nested include and terminate the request.&#13;&#10;e.g.&#13;&#10;include(dirname(__FILE__).."test_include.page");&#13;&#10;include("test_include.page"); &#32;-- identical to above&#13;&#10; &#32; @param filename: if no parent directory is specified, we will assume it is from the containing file's parent directory. &#13;&#10;if filename begins with "/", it will append the web root directory.&#13;&#10; &#32; @param bReload: true to reload the file. default to nil. files will be loaded only once.&#13;&#10; &#32; @return: result of the included function. 
				</summary>
				<parameter name="filename">if no parent directory is specified, we will assume it is from the containing file's parent directory. &#13;&#10;if filename begins with "/", it will append the web root directory.
				</parameter>
				<parameter name="bReload">true to reload the file. default to nil. files will be loaded only once.
				</parameter>
				<returns>return result of the included function. 
				</returns>
			</function>
			<function line="294" name="include_once">
				<summary>function env_imp:include_once(filename)&#13;&#10;same as include(), expect that this function only takes effect on first call for a given env.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="304" name="include_pagecode">
				<summary>function env_imp:include_pagecode(code, filename)&#13;&#10;include a given page code.&#13;&#10; &#32; @param code: the actual code string to include.&#13;&#10; &#32; @param filename: nil to default to current file. only used for displaying error
				</summary>
				<parameter name="code">the actual code string to include.
				</parameter>
				<parameter name="filename">nil to default to current file. only used for displaying error
				</parameter>
			</function>
			<function line="319" name="site_url">
				<summary>function env_imp:site_url(filename, scheme)&#13;&#10;return the site url like http://localhost:8080/
				</summary>
				<parameter name="filename"/>
				<parameter name="scheme"/>
			</function>
			<function line="324" name="site_config">
				<summary>function env_imp:site_config(name)&#13;&#10;&#13;&#10; &#32; @param name: if nil, the root config table is returned. 
				</summary>
				<parameter name="name">if nil, the root config table is returned. 
				</parameter>
			</function>
			<function line="333" name="addheader">
				<summary>function env_imp:addheader(name, value)&#13;&#10;add header, only possible when header is not sent yet. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="338" name="setheader">
				<summary>function env_imp:setheader(name, value)&#13;&#10;set header (replace previously set values), only possible when header is not sent yet. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="343" name="log">
				<summary>function env_imp:log(...)&#13;&#10;simple log any object, same as echo. 
				</summary>
			</function>
			<function line="348" name="sanitize">
				<summary>function env_imp:sanitize(text)&#13;&#10;Sanitizes all HTML tags
				</summary>
				<parameter name="text"/>
			</function>
			<function line="357" name="json_encode">
				<summary>function env_imp:json_encode(value, bUseEmptyArray)&#13;&#10;Returns a string containing the JSON representation of value.&#13;&#10; &#32; @param bUseEmptyArray: by default, empty table is serialized to json as object {}. &#13;&#10;calling this function will be serialized to json as array []
				</summary>
				<parameter name="value"/>
				<parameter name="bUseEmptyArray">by default, empty table is serialized to json as object {}. &#13;&#10;calling this function will be serialized to json as array []
				</parameter>
			</function>
			<function line="362" name="json_decode">
				<summary>function env_imp:json_decode(value)&#13;&#10;json decode
				</summary>
				<parameter name="value"/>
			</function>
			<function line="367" name="xml_encode">
				<summary>function env_imp:xml_encode(value)&#13;&#10;Returns a string containing the Xml representation of value. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="372" name="get_file_text">
				<summary>function env_imp:get_file_text(filename)&#13;&#10;get file text
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="385" name="yield">
				<summary>function env_imp:yield(bExitOnError)&#13;&#10;yield control until all async jobs are completed&#13;&#10; &#32; @param bExitOnError: if true, this function will handle error&#13;&#10; &#32; @return err, msg: err is true if there is error. 
				</summary>
				<parameter name="bExitOnError">if true, this function will handle error
				</parameter>
				<returns>return , msg: err is true if there is error. 
				</returns>
			</function>
			<function line="406" name="restore_page_env">
				<summary>function env_imp:restore_page_env()&#13;&#10;
				</summary>
			</function>
			<function line="418" name="resume">
				<summary>function env_imp:resume(err, msg)&#13;&#10;resume from where jobs are paused last.&#13;&#10; &#32; @param err: if there is error, this is true, otherwise it is nil.&#13;&#10; &#32; @param msg: error message in case err=true
				</summary>
				<parameter name="err">if there is error, this is true, otherwise it is nil.
				</parameter>
				<parameter name="msg">error message in case err=true
				</parameter>
			</function>
			<function line="441" name="gettable">
				<summary>function env_imp:gettable(tabNames)&#13;&#10;similar to commonlib.gettable(tabNames) but in page scope.&#13;&#10; &#32; @param tabNames: table names like "models.users"
				</summary>
				<parameter name="tabNames">table names like "models.users"
				</parameter>
			</function>
			<function line="447" name="createtable">
				<summary>function env_imp:createtable(tabNames, init_params)&#13;&#10;similar to commonlib.createtable(tabNames) but in page scope.&#13;&#10; &#32; @param tabNames: table names like "models.users"
				</summary>
				<parameter name="tabNames">table names like "models.users"
				</parameter>
				<parameter name="init_params"/>
			</function>
			<function line="452" name="inherit">
				<summary>function env_imp:inherit(baseClass, new_class, ctor)&#13;&#10;same as commonlib.inherit()
				</summary>
				<parameter name="baseClass"/>
				<parameter name="new_class"/>
				<parameter name="ctor"/>
			</function>
		</table>
	</tables>
	<globals/>
	<variables>
		<variable name="mathlib" type="mathlib"/>
		<variable name="commonlib" type="commonlib"/>
		<variable name="algorithm" type="algorithm"/>
		<variable name="table" type="table"/>
		<variable name="utf8" type="utf8"/>
		<variable name="Encoding" type="Encoding"/>
		<variable name="Timer" type="Timer"/>
		<variable name="TimerManager" type="TimerManager"/>
		<variable name="NPL" type="NPL"/>
		<variable name="os" type="os"/>
		<variable name="ParaScene" type="ParaScene"/>
		<variable name="ParaCamera" type="ParaCamera"/>
		<variable name="ParaEngine" type="ParaEngine"/>
		<variable name="ParaAsset" type="ParaAsset"/>
		<variable name="Request" type="Request"/>
		<variable name="CmdParser" type="CmdParser"/>
		<variable name="Event" type="Event"/>
		<variable name="EventTickFunc" type="EventTickFunc"/>
		<variable name="TimerEvent" type="TimerEvent"/>
		<variable name="ToolBase" type="ToolBase"/>
		<variable name="SignalConnections" type="SignalConnections"/>
		<variable name="ConnectionSynapse" type="ConnectionSynapse"/>
		<variable name="painter" type="painter"/>
		<variable name="Attribute" type="Attribute"/>
		<variable name="AttributeObject" type="AttributeObject"/>
		<variable name="Screen" type="Screen"/>
		<variable name="Window" type="Window"/>
		<variable name="UIElement" type="UIElement"/>
		<variable name="Keyboard" type="Keyboard"/>
		<variable name="Mouse" type="Mouse"/>
		<variable name="BufferPicking" type="BufferPicking"/>
		<variable name="OverlayPicking" type="OverlayPicking"/>
		<variable name="ShapesDrawer" type="ShapesDrawer"/>
		<variable name="AutoCamera" type="AutoCamera"/>
		<variable name="Cameras" type="Cameras"/>
		<variable name="request" type="request"/>
		<variable name="response" type="response"/>
		<variable name="npl_page_env" type="npl_page_env"/>
		<variable name="env_imp" type="env_imp"/>
	</variables>
</doc>